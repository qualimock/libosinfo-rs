// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../girs
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use gio_sys as gio;
use glib_sys as glib;
use gobject_sys as gobject;

#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t};
#[allow(unused_imports)]
use libc::{intptr_t, off_t, size_t, ssize_t, time_t, uintptr_t, FILE};
#[allow(unused_imports)]
use std::ffi::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type OsinfoDeviceDriverSigningReq = c_int;
pub const OSINFO_DEVICE_DRIVER_SIGNING_REQ_NONE: OsinfoDeviceDriverSigningReq = 0;
pub const OSINFO_DEVICE_DRIVER_SIGNING_REQ_STRICT: OsinfoDeviceDriverSigningReq = 1;
pub const OSINFO_DEVICE_DRIVER_SIGNING_REQ_WARN: OsinfoDeviceDriverSigningReq = 2;

pub type OsinfoError = c_int;
pub const OSINFO_ERROR_GENERIC: OsinfoError = 0;

pub type OsinfoInstallConfigParamPolicy = c_int;
pub const OSINFO_INSTALL_CONFIG_PARAM_POLICY_NONE: OsinfoInstallConfigParamPolicy = 0;
pub const OSINFO_INSTALL_CONFIG_PARAM_POLICY_REQUIRED: OsinfoInstallConfigParamPolicy = 1;
pub const OSINFO_INSTALL_CONFIG_PARAM_POLICY_OPTIONAL: OsinfoInstallConfigParamPolicy = 2;

pub type OsinfoInstallScriptInstallationSource = c_int;
pub const OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_MEDIA: OsinfoInstallScriptInstallationSource =
    0;
pub const OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_NETWORK: OsinfoInstallScriptInstallationSource =
    1;

pub type OsinfoMediaError = c_int;
pub const OSINFO_MEDIA_ERROR_NO_DESCRIPTORS: OsinfoMediaError = 0;
pub const OSINFO_MEDIA_ERROR_NO_PVD: OsinfoMediaError = 1;
pub const OSINFO_MEDIA_ERROR_NO_SVD: OsinfoMediaError = 2;
pub const OSINFO_MEDIA_ERROR_INSUFFICIENT_METADATA: OsinfoMediaError = 3;
pub const OSINFO_MEDIA_ERROR_NOT_BOOTABLE: OsinfoMediaError = 4;
pub const OSINFO_MEDIA_ERROR_NO_DIRECTORY_RECORD_EXTENT: OsinfoMediaError = 5;

pub type OsinfoPathFormat = c_int;
pub const OSINFO_PATH_FORMAT_UNIX: OsinfoPathFormat = 0;
pub const OSINFO_PATH_FORMAT_DOS: OsinfoPathFormat = 1;

pub type OsinfoProductRelationship = c_int;
pub const OSINFO_PRODUCT_RELATIONSHIP_DERIVES_FROM: OsinfoProductRelationship = 0;
pub const OSINFO_PRODUCT_RELATIONSHIP_UPGRADES: OsinfoProductRelationship = 1;
pub const OSINFO_PRODUCT_RELATIONSHIP_CLONES: OsinfoProductRelationship = 2;

pub type OsinfoReleaseStatus = c_int;
pub const OSINFO_RELEASE_STATUS_RELEASED: OsinfoReleaseStatus = 0;
pub const OSINFO_RELEASE_STATUS_SNAPSHOT: OsinfoReleaseStatus = 1;
pub const OSINFO_RELEASE_STATUS_PRERELEASE: OsinfoReleaseStatus = 2;
pub const OSINFO_RELEASE_STATUS_ROLLING: OsinfoReleaseStatus = 3;

pub type OsinfoTreeError = c_int;
pub const OSINFO_TREE_ERROR_NO_TREEINFO: OsinfoTreeError = 0;
pub const OSINFO_TREE_ERROR_NOT_SUPPORTED_PROTOCOL: OsinfoTreeError = 1;

// Constants
pub const OSINFO_ARCHITECTURE_ALL: &[u8] = b"all\0";
pub const OSINFO_AVATAR_FORMAT_PROP_ALPHA: &[u8] = b"alpha\0";
pub const OSINFO_AVATAR_FORMAT_PROP_HEIGHT: &[u8] = b"height\0";
pub const OSINFO_AVATAR_FORMAT_PROP_MIME_TYPE: &[u8] = b"mime-type\0";
pub const OSINFO_AVATAR_FORMAT_PROP_WIDTH: &[u8] = b"width\0";
pub const OSINFO_DEVICELINK_PROP_DRIVER: &[u8] = b"driver\0";
pub const OSINFO_DEVICELINK_PROP_SUPPORTED: &[u8] = b"supported\0";
pub const OSINFO_DEVICE_DRIVER_DEFAULT_PRIORITY: c_int = 50;
pub const OSINFO_DEVICE_DRIVER_PROP_ARCHITECTURE: &[u8] = b"arch\0";
pub const OSINFO_DEVICE_DRIVER_PROP_DEVICE: &[u8] = b"device\0";
pub const OSINFO_DEVICE_DRIVER_PROP_FILE: &[u8] = b"file\0";
pub const OSINFO_DEVICE_DRIVER_PROP_LOCATION: &[u8] = b"location\0";
pub const OSINFO_DEVICE_DRIVER_PROP_PRE_INSTALLABLE: &[u8] = b"pre-installable\0";
pub const OSINFO_DEVICE_DRIVER_PROP_PRIORITY: &[u8] = b"priority\0";
pub const OSINFO_DEVICE_DRIVER_PROP_SIGNED: &[u8] = b"signed\0";
pub const OSINFO_DEVICE_PROP_BUS_TYPE: &[u8] = b"bus-type\0";
pub const OSINFO_DEVICE_PROP_CLASS: &[u8] = b"class\0";
pub const OSINFO_DEVICE_PROP_NAME: &[u8] = b"name\0";
pub const OSINFO_DEVICE_PROP_PRODUCT: &[u8] = b"product\0";
pub const OSINFO_DEVICE_PROP_PRODUCT_ID: &[u8] = b"product-id\0";
pub const OSINFO_DEVICE_PROP_SUBSYSTEM: &[u8] = b"subsystem\0";
pub const OSINFO_DEVICE_PROP_VENDOR: &[u8] = b"vendor\0";
pub const OSINFO_DEVICE_PROP_VENDOR_ID: &[u8] = b"vendor-id\0";
pub const OSINFO_ENTITY_PROP_ID: &[u8] = b"id\0";
pub const OSINFO_FIRMWARE_PROP_ARCHITECTURE: &[u8] = b"architecture\0";
pub const OSINFO_FIRMWARE_PROP_SUPPORTED: &[u8] = b"supported\0";
pub const OSINFO_FIRMWARE_PROP_TYPE: &[u8] = b"type\0";
pub const OSINFO_GIBIBYTES: c_int = 1073741824;
pub const OSINFO_IMAGE_PROP_ARCHITECTURE: &[u8] = b"architecture\0";
pub const OSINFO_IMAGE_PROP_CLOUD_INIT: &[u8] = b"cloud-init\0";
pub const OSINFO_IMAGE_PROP_FORMAT: &[u8] = b"format\0";
pub const OSINFO_IMAGE_PROP_URL: &[u8] = b"url\0";
pub const OSINFO_IMAGE_PROP_VARIANT: &[u8] = b"variant\0";
pub const OSINFO_INSTALL_CONFIG_PARAM_PROP_DATAMAP: &[u8] = b"value-map\0";
pub const OSINFO_INSTALL_CONFIG_PARAM_PROP_NAME: &[u8] = b"name\0";
pub const OSINFO_INSTALL_CONFIG_PARAM_PROP_POLICY: &[u8] = b"policy\0";
pub const OSINFO_INSTALL_CONFIG_PROP_ADMIN_PASSWORD: &[u8] = b"admin-password\0";
pub const OSINFO_INSTALL_CONFIG_PROP_AVATAR_DISK: &[u8] = b"avatar-disk\0";
pub const OSINFO_INSTALL_CONFIG_PROP_AVATAR_LOCATION: &[u8] = b"avatar-location\0";
pub const OSINFO_INSTALL_CONFIG_PROP_DRIVER_SIGNING: &[u8] = b"driver-signing\0";
pub const OSINFO_INSTALL_CONFIG_PROP_HARDWARE_ARCH: &[u8] = b"hardware-arch\0";
pub const OSINFO_INSTALL_CONFIG_PROP_HOSTNAME: &[u8] = b"hostname\0";
pub const OSINFO_INSTALL_CONFIG_PROP_INSTALLATION_URL: &[u8] = b"installation-url\0";
pub const OSINFO_INSTALL_CONFIG_PROP_L10N_KEYBOARD: &[u8] = b"l10n-keyboard\0";
pub const OSINFO_INSTALL_CONFIG_PROP_L10N_LANGUAGE: &[u8] = b"l10n-language\0";
pub const OSINFO_INSTALL_CONFIG_PROP_L10N_TIMEZONE: &[u8] = b"l10n-timezone\0";
pub const OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_DISK: &[u8] =
    b"post-install-drivers-disk\0";
pub const OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_LOCATION: &[u8] =
    b"post-install-drivers-location\0";
pub const OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_DISK: &[u8] =
    b"pre-install-drivers-disk\0";
pub const OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_LOCATION: &[u8] =
    b"pre-install-drivers-location\0";
pub const OSINFO_INSTALL_CONFIG_PROP_REG_LOGIN: &[u8] = b"reg-login\0";
pub const OSINFO_INSTALL_CONFIG_PROP_REG_PASSWORD: &[u8] = b"reg-password\0";
pub const OSINFO_INSTALL_CONFIG_PROP_REG_PRODUCTKEY: &[u8] = b"reg-product-key\0";
pub const OSINFO_INSTALL_CONFIG_PROP_SCRIPT_DISK: &[u8] = b"script-disk\0";
pub const OSINFO_INSTALL_CONFIG_PROP_TARGET_DISK: &[u8] = b"target-disk\0";
pub const OSINFO_INSTALL_CONFIG_PROP_USER_ADMIN: &[u8] = b"user-admin\0";
pub const OSINFO_INSTALL_CONFIG_PROP_USER_AUTOLOGIN: &[u8] = b"user-autologin\0";
pub const OSINFO_INSTALL_CONFIG_PROP_USER_LOGIN: &[u8] = b"user-login\0";
pub const OSINFO_INSTALL_CONFIG_PROP_USER_PASSWORD: &[u8] = b"user-password\0";
pub const OSINFO_INSTALL_CONFIG_PROP_USER_REALNAME: &[u8] = b"user-realname\0";
pub const OSINFO_INSTALL_SCRIPT_PROFILE_DESKTOP: &[u8] = b"desktop\0";
pub const OSINFO_INSTALL_SCRIPT_PROFILE_JEOS: &[u8] = b"jeos\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_CAN_POST_INSTALL_DRIVERS: &[u8] =
    b"can-post-install-drivers\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_CAN_PRE_INSTALL_DRIVERS: &[u8] = b"can-pre-install-drivers\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_EXPECTED_FILENAME: &[u8] = b"expected-filename\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_INJECTION_METHOD: &[u8] = b"injection-method\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_INSTALLATION_SOURCE: &[u8] = b"installation-source\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_NEEDS_INTERNET: &[u8] = b"needs-internet\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_PATH_FORMAT: &[u8] = b"path-format\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_POST_INSTALL_DRIVERS_SIGNING_REQ: &[u8] =
    b"post-install-drivers-signing-req\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_PREFERRED_INJECTION_METHOD: &[u8] =
    b"preferred-injection-method\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_PRE_INSTALL_DRIVERS_SIGNING_REQ: &[u8] =
    b"pre-install-drivers-signing-req\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_PRODUCT_KEY_FORMAT: &[u8] = b"product-key-format\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_PROFILE: &[u8] = b"profile\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_DATA: &[u8] = b"template-data\0";
pub const OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_URI: &[u8] = b"template-uri\0";
pub const OSINFO_KIBIBYTES: c_int = 1024;
pub const OSINFO_MAJOR_VERSION: c_int = 1;
pub const OSINFO_MEBIBYTES: c_int = 1048576;
pub const OSINFO_MEDIA_PROP_APPLICATION_ID: &[u8] = b"application-id\0";
pub const OSINFO_MEDIA_PROP_ARCHITECTURE: &[u8] = b"architecture\0";
pub const OSINFO_MEDIA_PROP_BOOTABLE: &[u8] = b"bootable\0";
pub const OSINFO_MEDIA_PROP_EJECT_AFTER_INSTALL: &[u8] = b"eject-after-install\0";
pub const OSINFO_MEDIA_PROP_INITRD: &[u8] = b"initrd\0";
pub const OSINFO_MEDIA_PROP_INSTALLER: &[u8] = b"installer\0";
pub const OSINFO_MEDIA_PROP_INSTALLER_REBOOTS: &[u8] = b"installer-reboots\0";
pub const OSINFO_MEDIA_PROP_INSTALLER_SCRIPT: &[u8] = b"installer-script\0";
pub const OSINFO_MEDIA_PROP_KERNEL: &[u8] = b"kernel\0";
pub const OSINFO_MEDIA_PROP_LANG: &[u8] = b"l10n-language\0";
pub const OSINFO_MEDIA_PROP_LANG_MAP: &[u8] = b"l10n-language-map\0";
pub const OSINFO_MEDIA_PROP_LANG_REGEX: &[u8] = b"l10n-language-regex\0";
pub const OSINFO_MEDIA_PROP_LIVE: &[u8] = b"live\0";
pub const OSINFO_MEDIA_PROP_PUBLISHER_ID: &[u8] = b"publisher-id\0";
pub const OSINFO_MEDIA_PROP_SYSTEM_ID: &[u8] = b"system-id\0";
pub const OSINFO_MEDIA_PROP_URL: &[u8] = b"url\0";
pub const OSINFO_MEDIA_PROP_VARIANT: &[u8] = b"variant\0";
pub const OSINFO_MEDIA_PROP_VOLUME_ID: &[u8] = b"volume-id\0";
pub const OSINFO_MEDIA_PROP_VOLUME_SIZE: &[u8] = b"volume-size\0";
pub const OSINFO_MEGAHERTZ: c_int = 1000000;
pub const OSINFO_MICRO_VERSION: c_int = 0;
pub const OSINFO_MINOR_VERSION: c_int = 12;
pub const OSINFO_OS_PROP_CLOUD_IMAGE_USERNAME: &[u8] = b"cloud-image-username\0";
pub const OSINFO_OS_PROP_DISTRO: &[u8] = b"distro\0";
pub const OSINFO_OS_PROP_FAMILY: &[u8] = b"family\0";
pub const OSINFO_OS_PROP_KERNEL_URL_ARGUMENT: &[u8] = b"kernel-url-argument\0";
pub const OSINFO_OS_PROP_RELEASE_STATUS: &[u8] = b"release-status\0";
pub const OSINFO_OS_VARIANT_PROP_NAME: &[u8] = b"name\0";
pub const OSINFO_PRODUCT_PROP_CODENAME: &[u8] = b"codename\0";
pub const OSINFO_PRODUCT_PROP_EOL_DATE: &[u8] = b"eol-date\0";
pub const OSINFO_PRODUCT_PROP_LOGO: &[u8] = b"logo\0";
pub const OSINFO_PRODUCT_PROP_NAME: &[u8] = b"name\0";
pub const OSINFO_PRODUCT_PROP_RELEASE_DATE: &[u8] = b"release-date\0";
pub const OSINFO_PRODUCT_PROP_SHORT_ID: &[u8] = b"short-id\0";
pub const OSINFO_PRODUCT_PROP_VENDOR: &[u8] = b"vendor\0";
pub const OSINFO_PRODUCT_PROP_VERSION: &[u8] = b"version\0";
pub const OSINFO_RESOURCES_PROP_ARCHITECTURE: &[u8] = b"architecture\0";
pub const OSINFO_RESOURCES_PROP_CPU: &[u8] = b"cpu\0";
pub const OSINFO_RESOURCES_PROP_N_CPUS: &[u8] = b"n-cpus\0";
pub const OSINFO_RESOURCES_PROP_RAM: &[u8] = b"ram\0";
pub const OSINFO_RESOURCES_PROP_STORAGE: &[u8] = b"storage\0";
pub const OSINFO_TREE_PROP_ARCHITECTURE: &[u8] = b"architecture\0";
pub const OSINFO_TREE_PROP_BOOT_ISO: &[u8] = b"boot-iso\0";
pub const OSINFO_TREE_PROP_HAS_TREEINFO: &[u8] = b"has-treeinfo\0";
pub const OSINFO_TREE_PROP_INITRD: &[u8] = b"initrd\0";
pub const OSINFO_TREE_PROP_KERNEL: &[u8] = b"kernel\0";
pub const OSINFO_TREE_PROP_TREEINFO_ARCH: &[u8] = b"treeinfo-arch\0";
pub const OSINFO_TREE_PROP_TREEINFO_FAMILY: &[u8] = b"treeinfo-family\0";
pub const OSINFO_TREE_PROP_TREEINFO_VARIANT: &[u8] = b"treeinfo-variant\0";
pub const OSINFO_TREE_PROP_TREEINFO_VERSION: &[u8] = b"treeinfo-version\0";
pub const OSINFO_TREE_PROP_URL: &[u8] = b"url\0";
pub const OSINFO_TREE_PROP_VARIANT: &[u8] = b"variant\0";

// Flags
pub type OsinfoInstallScriptInjectionMethod = c_uint;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_CDROM: OsinfoInstallScriptInjectionMethod = 1;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK: OsinfoInstallScriptInjectionMethod = 2;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_FLOPPY: OsinfoInstallScriptInjectionMethod = 4;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD: OsinfoInstallScriptInjectionMethod = 8;
pub const OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_WEB: OsinfoInstallScriptInjectionMethod = 16;

pub type OsinfoMediaDetectFlags = c_uint;
pub const OSINFO_MEDIA_DETECT_REQUIRE_BOOTABLE: OsinfoMediaDetectFlags = 1;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoAvatarFormatClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoAvatarFormatClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoAvatarFormatClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoAvatarFormatPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoAvatarFormatPrivate = _OsinfoAvatarFormatPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDatamapClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoDatamapClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDatamapClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDatamapListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoDatamapListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDatamapListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDatamapListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDatamapListPrivate = _OsinfoDatamapListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDatamapPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDatamapPrivate = _OsinfoDatamapPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDbClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for OsinfoDbClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDbClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDbPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDbPrivate = _OsinfoDbPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeploymentClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoDeploymentClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeploymentClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeploymentListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoDeploymentListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeploymentListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeploymentListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeploymentListPrivate = _OsinfoDeploymentListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeploymentPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeploymentPrivate = _OsinfoDeploymentPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoDeviceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceDriverClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoDeviceDriverClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceDriverClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceDriverListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoDeviceDriverListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceDriverListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeviceDriverListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeviceDriverListPrivate = _OsinfoDeviceDriverListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeviceDriverPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeviceDriverPrivate = _OsinfoDeviceDriverPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceLinkClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoDeviceLinkClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceLinkClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceLinkFilterClass {
    pub parent_class: OsinfoFilterClass,
}

impl ::std::fmt::Debug for OsinfoDeviceLinkFilterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceLinkFilterClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeviceLinkFilterPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeviceLinkFilterPrivate = _OsinfoDeviceLinkFilterPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceLinkListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoDeviceLinkListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceLinkListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeviceLinkListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeviceLinkListPrivate = _OsinfoDeviceLinkListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeviceLinkPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeviceLinkPrivate = _OsinfoDeviceLinkPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoDeviceListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDeviceListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDeviceListPrivate = _OsinfoDeviceListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoDevicePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoDevicePrivate = _OsinfoDevicePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoEntityClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for OsinfoEntityClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoEntityClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoEntityPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoEntityPrivate = _OsinfoEntityPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoFilterClass {
    pub parent_class: gobject::GObjectClass,
    pub matches: Option<unsafe extern "C" fn(*mut OsinfoFilter, *mut OsinfoEntity) -> gboolean>,
}

impl ::std::fmt::Debug for OsinfoFilterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoFilterClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .field("matches", &self.matches)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoFilterPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoFilterPrivate = _OsinfoFilterPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoFirmwareClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoFirmwareClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoFirmwareClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoFirmwareListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoFirmwareListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoFirmwareListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoFirmwareListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoFirmwareListPrivate = _OsinfoFirmwareListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoFirmwarePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoFirmwarePrivate = _OsinfoFirmwarePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoImageClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoImageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoImageClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoImageListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoImageListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoImageListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoImageListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoImageListPrivate = _OsinfoImageListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoImagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoImagePrivate = _OsinfoImagePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallConfigClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoInstallConfigClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallConfigClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallConfigParamClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoInstallConfigParamClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallConfigParamClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallConfigParamListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoInstallConfigParamListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallConfigParamListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoInstallConfigParamListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoInstallConfigParamListPrivate = _OsinfoInstallConfigParamListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoInstallConfigParamPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoInstallConfigParamPrivate = _OsinfoInstallConfigParamPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoInstallConfigPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoInstallConfigPrivate = _OsinfoInstallConfigPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallScriptClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoInstallScriptClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallScriptClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallScriptListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoInstallScriptListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallScriptListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoInstallScriptListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoInstallScriptListPrivate = _OsinfoInstallScriptListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoInstallScriptPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoInstallScriptPrivate = _OsinfoInstallScriptPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoListClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for OsinfoListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoListPrivate = _OsinfoListPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoLoaderClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for OsinfoLoaderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoLoaderClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoLoaderPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoLoaderPrivate = _OsinfoLoaderPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoMediaClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoMediaClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoMediaClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoMediaListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoMediaListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoMediaListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoMediaListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoMediaListPrivate = _OsinfoMediaListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoMediaPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoMediaPrivate = _OsinfoMediaPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsClass {
    pub parent_class: OsinfoProductClass,
}

impl ::std::fmt::Debug for OsinfoOsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsListClass {
    pub parent_class: OsinfoProductListClass,
}

impl ::std::fmt::Debug for OsinfoOsListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoOsListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoOsListPrivate = _OsinfoOsListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoOsPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoOsPrivate = _OsinfoOsPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsVariantClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoOsVariantClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsVariantClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsVariantListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoOsVariantListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsVariantListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoOsVariantListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoOsVariantListPrivate = _OsinfoOsVariantListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoOsVariantPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoOsVariantPrivate = _OsinfoOsVariantPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoPlatformClass {
    pub parent_class: OsinfoProductClass,
}

impl ::std::fmt::Debug for OsinfoPlatformClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoPlatformClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoPlatformListClass {
    pub parent_class: OsinfoProductListClass,
}

impl ::std::fmt::Debug for OsinfoPlatformListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoPlatformListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoPlatformListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoPlatformListPrivate = _OsinfoPlatformListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoPlatformPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoPlatformPrivate = _OsinfoPlatformPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoProductClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoProductClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoProductClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoProductFilterClass {
    pub parent_class: OsinfoFilterClass,
}

impl ::std::fmt::Debug for OsinfoProductFilterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoProductFilterClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoProductFilterPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoProductFilterPrivate = _OsinfoProductFilterPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoProductListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoProductListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoProductListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoProductListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoProductListPrivate = _OsinfoProductListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoProductPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoProductPrivate = _OsinfoProductPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoResourcesClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoResourcesClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoResourcesClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoResourcesListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoResourcesListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoResourcesListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoResourcesListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoResourcesListPrivate = _OsinfoResourcesListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoResourcesPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoResourcesPrivate = _OsinfoResourcesPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoTreeClass {
    pub parent_class: OsinfoEntityClass,
}

impl ::std::fmt::Debug for OsinfoTreeClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoTreeClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoTreeListClass {
    pub parent_class: OsinfoListClass,
}

impl ::std::fmt::Debug for OsinfoTreeListClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoTreeListClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoTreeListPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoTreeListPrivate = _OsinfoTreeListPrivate;

#[repr(C)]
#[allow(dead_code)]
pub struct _OsinfoTreePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type OsinfoTreePrivate = _OsinfoTreePrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoAvatarFormat {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoAvatarFormatPrivate,
}

impl ::std::fmt::Debug for OsinfoAvatarFormat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoAvatarFormat @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDatamap {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDatamapPrivate,
}

impl ::std::fmt::Debug for OsinfoDatamap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDatamap @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDatamapList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDatamapListPrivate,
}

impl ::std::fmt::Debug for OsinfoDatamapList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDatamapList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDb {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoDbPrivate,
}

impl ::std::fmt::Debug for OsinfoDb {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDb @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeployment {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDeploymentPrivate,
}

impl ::std::fmt::Debug for OsinfoDeployment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeployment @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeploymentList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeploymentListPrivate,
}

impl ::std::fmt::Debug for OsinfoDeploymentList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeploymentList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDevice {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDevicePrivate,
}

impl ::std::fmt::Debug for OsinfoDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDevice @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceDriver {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDeviceDriverPrivate,
}

impl ::std::fmt::Debug for OsinfoDeviceDriver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceDriver @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceDriverList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeviceDriverListPrivate,
}

impl ::std::fmt::Debug for OsinfoDeviceDriverList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceDriverList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceLink {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoDeviceLinkPrivate,
}

impl ::std::fmt::Debug for OsinfoDeviceLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceLink @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceLinkFilter {
    pub parent_instance: OsinfoFilter,
    pub priv_: *mut OsinfoDeviceLinkFilterPrivate,
}

impl ::std::fmt::Debug for OsinfoDeviceLinkFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceLinkFilter @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceLinkList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeviceLinkListPrivate,
}

impl ::std::fmt::Debug for OsinfoDeviceLinkList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceLinkList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoDeviceList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoDeviceListPrivate,
}

impl ::std::fmt::Debug for OsinfoDeviceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoDeviceList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoEntity {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoEntityPrivate,
}

impl ::std::fmt::Debug for OsinfoEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoEntity @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoFilter {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoFilterPrivate,
}

impl ::std::fmt::Debug for OsinfoFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoFilter @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoFirmware {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoFirmwarePrivate,
}

impl ::std::fmt::Debug for OsinfoFirmware {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoFirmware @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoFirmwareList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoFirmwareListPrivate,
}

impl ::std::fmt::Debug for OsinfoFirmwareList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoFirmwareList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoImage {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoImagePrivate,
}

impl ::std::fmt::Debug for OsinfoImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoImage @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoImageList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoImageListPrivate,
}

impl ::std::fmt::Debug for OsinfoImageList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoImageList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallConfig {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoInstallConfigPrivate,
}

impl ::std::fmt::Debug for OsinfoInstallConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallConfig @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallConfigParam {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoInstallConfigParamPrivate,
}

impl ::std::fmt::Debug for OsinfoInstallConfigParam {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallConfigParam @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallConfigParamList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoInstallConfigParamListPrivate,
}

impl ::std::fmt::Debug for OsinfoInstallConfigParamList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallConfigParamList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallScript {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoInstallScriptPrivate,
}

impl ::std::fmt::Debug for OsinfoInstallScript {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallScript @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoInstallScriptList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoInstallScriptListPrivate,
}

impl ::std::fmt::Debug for OsinfoInstallScriptList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoInstallScriptList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoList {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoListPrivate,
}

impl ::std::fmt::Debug for OsinfoList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoLoader {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut OsinfoLoaderPrivate,
}

impl ::std::fmt::Debug for OsinfoLoader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoLoader @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoMedia {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoMediaPrivate,
}

impl ::std::fmt::Debug for OsinfoMedia {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoMedia @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoMediaList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoMediaListPrivate,
}

impl ::std::fmt::Debug for OsinfoMediaList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoMediaList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOs {
    pub parent_instance: OsinfoProduct,
    pub priv_: *mut OsinfoOsPrivate,
}

impl ::std::fmt::Debug for OsinfoOs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOs @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsList {
    pub parent_instance: OsinfoProductList,
    pub priv_: *mut OsinfoOsListPrivate,
}

impl ::std::fmt::Debug for OsinfoOsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsVariant {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoOsVariantPrivate,
}

impl ::std::fmt::Debug for OsinfoOsVariant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsVariant @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoOsVariantList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoOsVariantListPrivate,
}

impl ::std::fmt::Debug for OsinfoOsVariantList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoOsVariantList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoPlatform {
    pub parent_instance: OsinfoProduct,
    pub priv_: *mut OsinfoPlatformPrivate,
}

impl ::std::fmt::Debug for OsinfoPlatform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoPlatform @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoPlatformList {
    pub parent_instance: OsinfoProductList,
    pub priv_: *mut OsinfoPlatformListPrivate,
}

impl ::std::fmt::Debug for OsinfoPlatformList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoPlatformList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoProduct {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoProductPrivate,
}

impl ::std::fmt::Debug for OsinfoProduct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoProduct @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoProductFilter {
    pub parent_instance: OsinfoFilter,
    pub priv_: *mut OsinfoProductFilterPrivate,
}

impl ::std::fmt::Debug for OsinfoProductFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoProductFilter @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoProductList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoProductListPrivate,
}

impl ::std::fmt::Debug for OsinfoProductList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoProductList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoResources {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoResourcesPrivate,
}

impl ::std::fmt::Debug for OsinfoResources {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoResources @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoResourcesList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoResourcesListPrivate,
}

impl ::std::fmt::Debug for OsinfoResourcesList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoResourcesList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoTree {
    pub parent_instance: OsinfoEntity,
    pub priv_: *mut OsinfoTreePrivate,
}

impl ::std::fmt::Debug for OsinfoTree {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoTree @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct OsinfoTreeList {
    pub parent_instance: OsinfoList,
    pub priv_: *mut OsinfoTreeListPrivate,
}

impl ::std::fmt::Debug for OsinfoTreeList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("OsinfoTreeList @ {self:p}"))
            .field("parent_instance", &self.parent_instance)
            .field("priv_", &self.priv_)
            .finish()
    }
}

extern "C" {

    //=========================================================================
    // OsinfoDeviceDriverSigningReq
    //=========================================================================
    pub fn osinfo_device_driver_signing_req_get_type() -> GType;

    //=========================================================================
    // OsinfoError
    //=========================================================================
    #[cfg(feature = "v1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_8")))]
    pub fn osinfo_error_get_type() -> GType;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_error_quark() -> glib::GQuark;

    //=========================================================================
    // OsinfoInstallConfigParamPolicy
    //=========================================================================
    pub fn osinfo_install_config_param_policy_get_type() -> GType;

    //=========================================================================
    // OsinfoInstallScriptInstallationSource
    //=========================================================================
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_install_script_installation_source_get_type() -> GType;

    //=========================================================================
    // OsinfoMediaError
    //=========================================================================
    pub fn osinfo_media_error_get_type() -> GType;
    pub fn osinfo_media_error_quark() -> glib::GQuark;

    //=========================================================================
    // OsinfoPathFormat
    //=========================================================================
    pub fn osinfo_path_format_get_type() -> GType;

    //=========================================================================
    // OsinfoProductRelationship
    //=========================================================================
    pub fn osinfo_product_relationship_get_type() -> GType;

    //=========================================================================
    // OsinfoReleaseStatus
    //=========================================================================
    pub fn osinfo_release_status_get_type() -> GType;

    //=========================================================================
    // OsinfoTreeError
    //=========================================================================
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_tree_error_get_type() -> GType;
    pub fn osinfo_tree_error_quark() -> glib::GQuark;

    //=========================================================================
    // OsinfoInstallScriptInjectionMethod
    //=========================================================================
    pub fn osinfo_install_script_injection_method_get_type() -> GType;

    //=========================================================================
    // OsinfoMediaDetectFlags
    //=========================================================================
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_media_detect_flags_get_type() -> GType;

    //=========================================================================
    // OsinfoAvatarFormat
    //=========================================================================
    pub fn osinfo_avatar_format_get_type() -> GType;
    pub fn osinfo_avatar_format_new() -> *mut OsinfoAvatarFormat;
    pub fn osinfo_avatar_format_get_alpha(avatar: *mut OsinfoAvatarFormat) -> gboolean;
    pub fn osinfo_avatar_format_get_height(avatar: *mut OsinfoAvatarFormat) -> c_int;
    pub fn osinfo_avatar_format_get_mime_types(avatar: *mut OsinfoAvatarFormat)
        -> *mut glib::GList;
    pub fn osinfo_avatar_format_get_width(avatar: *mut OsinfoAvatarFormat) -> c_int;

    //=========================================================================
    // OsinfoDatamap
    //=========================================================================
    pub fn osinfo_datamap_get_type() -> GType;
    pub fn osinfo_datamap_new(id: *const c_char) -> *mut OsinfoDatamap;
    pub fn osinfo_datamap_insert(
        map: *mut OsinfoDatamap,
        inval: *const c_char,
        outval: *const c_char,
    );
    pub fn osinfo_datamap_lookup(map: *mut OsinfoDatamap, inval: *const c_char) -> *const c_char;
    pub fn osinfo_datamap_reverse_lookup(
        map: *mut OsinfoDatamap,
        outval: *const c_char,
    ) -> *const c_char;

    //=========================================================================
    // OsinfoDatamapList
    //=========================================================================
    pub fn osinfo_datamaplist_get_type() -> GType;
    pub fn osinfo_datamaplist_new() -> *mut OsinfoDatamapList;

    //=========================================================================
    // OsinfoDb
    //=========================================================================
    pub fn osinfo_db_get_type() -> GType;
    pub fn osinfo_db_new() -> *mut OsinfoDb;
    pub fn osinfo_db_add_datamap(db: *mut OsinfoDb, datamap: *mut OsinfoDatamap);
    pub fn osinfo_db_add_deployment(db: *mut OsinfoDb, deployment: *mut OsinfoDeployment);
    pub fn osinfo_db_add_device(db: *mut OsinfoDb, device: *mut OsinfoDevice);
    pub fn osinfo_db_add_install_script(db: *mut OsinfoDb, script: *mut OsinfoInstallScript);
    pub fn osinfo_db_add_os(db: *mut OsinfoDb, os: *mut OsinfoOs);
    pub fn osinfo_db_add_platform(db: *mut OsinfoDb, platform: *mut OsinfoPlatform);
    pub fn osinfo_db_find_deployment(
        db: *mut OsinfoDb,
        os: *mut OsinfoOs,
        platform: *mut OsinfoPlatform,
    ) -> *mut OsinfoDeployment;
    pub fn osinfo_db_get_datamap(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoDatamap;
    pub fn osinfo_db_get_datamap_list(db: *mut OsinfoDb) -> *mut OsinfoDatamapList;
    pub fn osinfo_db_get_deployment(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoDeployment;
    pub fn osinfo_db_get_deployment_list(db: *mut OsinfoDb) -> *mut OsinfoDeploymentList;
    pub fn osinfo_db_get_device(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoDevice;
    pub fn osinfo_db_get_device_list(db: *mut OsinfoDb) -> *mut OsinfoDeviceList;
    pub fn osinfo_db_get_install_script(
        db: *mut OsinfoDb,
        id: *const c_char,
    ) -> *mut OsinfoInstallScript;
    pub fn osinfo_db_get_install_script_list(db: *mut OsinfoDb) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_db_get_os(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoOs;
    pub fn osinfo_db_get_os_list(db: *mut OsinfoDb) -> *mut OsinfoOsList;
    pub fn osinfo_db_get_platform(db: *mut OsinfoDb, id: *const c_char) -> *mut OsinfoPlatform;
    pub fn osinfo_db_get_platform_list(db: *mut OsinfoDb) -> *mut OsinfoPlatformList;
    pub fn osinfo_db_guess_os_from_media(
        db: *mut OsinfoDb,
        media: *mut OsinfoMedia,
        matched_media: *mut *mut OsinfoMedia,
    ) -> *mut OsinfoOs;
    pub fn osinfo_db_guess_os_from_tree(
        db: *mut OsinfoDb,
        tree: *mut OsinfoTree,
        matched_tree: *mut *mut OsinfoTree,
    ) -> *mut OsinfoOs;
    pub fn osinfo_db_identify_media(db: *mut OsinfoDb, media: *mut OsinfoMedia) -> gboolean;
    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    pub fn osinfo_db_identify_medialist(
        db: *mut OsinfoDb,
        media: *mut OsinfoMedia,
    ) -> *mut OsinfoMediaList;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_db_identify_tree(db: *mut OsinfoDb, tree: *mut OsinfoTree) -> gboolean;
    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    pub fn osinfo_db_identify_treelist(
        db: *mut OsinfoDb,
        tree: *mut OsinfoTree,
    ) -> *mut OsinfoTreeList;
    pub fn osinfo_db_unique_values_for_os_relationship(
        db: *mut OsinfoDb,
        relshp: OsinfoProductRelationship,
    ) -> *mut OsinfoOsList;
    pub fn osinfo_db_unique_values_for_platform_relationship(
        db: *mut OsinfoDb,
        relshp: OsinfoProductRelationship,
    ) -> *mut OsinfoPlatformList;
    pub fn osinfo_db_unique_values_for_property_in_deployment(
        db: *mut OsinfoDb,
        propName: *const c_char,
    ) -> *mut glib::GList;
    pub fn osinfo_db_unique_values_for_property_in_device(
        db: *mut OsinfoDb,
        propName: *const c_char,
    ) -> *mut glib::GList;
    pub fn osinfo_db_unique_values_for_property_in_os(
        db: *mut OsinfoDb,
        propName: *const c_char,
    ) -> *mut glib::GList;
    pub fn osinfo_db_unique_values_for_property_in_platform(
        db: *mut OsinfoDb,
        propName: *const c_char,
    ) -> *mut glib::GList;

    //=========================================================================
    // OsinfoDeployment
    //=========================================================================
    pub fn osinfo_deployment_get_type() -> GType;
    pub fn osinfo_deployment_new(
        id: *const c_char,
        os: *mut OsinfoOs,
        platform: *mut OsinfoPlatform,
    ) -> *mut OsinfoDeployment;
    pub fn osinfo_deployment_add_device(
        deployment: *mut OsinfoDeployment,
        dev: *mut OsinfoDevice,
    ) -> *mut OsinfoDeviceLink;
    pub fn osinfo_deployment_get_device_links(
        deployment: *mut OsinfoDeployment,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_deployment_get_devices(
        deployment: *mut OsinfoDeployment,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_deployment_get_os(deployment: *mut OsinfoDeployment) -> *mut OsinfoOs;
    pub fn osinfo_deployment_get_platform(deployment: *mut OsinfoDeployment)
        -> *mut OsinfoPlatform;
    pub fn osinfo_deployment_get_preferred_device(
        deployment: *mut OsinfoDeployment,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDevice;
    pub fn osinfo_deployment_get_preferred_device_link(
        deployment: *mut OsinfoDeployment,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceLink;

    //=========================================================================
    // OsinfoDeploymentList
    //=========================================================================
    pub fn osinfo_deploymentlist_get_type() -> GType;
    pub fn osinfo_deploymentlist_new() -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_copy(
        source: *mut OsinfoDeploymentList,
    ) -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_filtered(
        source: *mut OsinfoDeploymentList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_intersection(
        sourceOne: *mut OsinfoDeploymentList,
        sourceTwo: *mut OsinfoDeploymentList,
    ) -> *mut OsinfoDeploymentList;
    pub fn osinfo_deploymentlist_new_union(
        sourceOne: *mut OsinfoDeploymentList,
        sourceTwo: *mut OsinfoDeploymentList,
    ) -> *mut OsinfoDeploymentList;

    //=========================================================================
    // OsinfoDevice
    //=========================================================================
    pub fn osinfo_device_get_type() -> GType;
    pub fn osinfo_device_new(id: *const c_char) -> *mut OsinfoDevice;
    pub fn osinfo_device_get_bus_type(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_class(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_name(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_product(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_product_id(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_subsystem(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_vendor(dev: *mut OsinfoDevice) -> *const c_char;
    pub fn osinfo_device_get_vendor_id(dev: *mut OsinfoDevice) -> *const c_char;

    //=========================================================================
    // OsinfoDeviceDriver
    //=========================================================================
    pub fn osinfo_device_driver_get_type() -> GType;
    pub fn osinfo_device_driver_get_architecture(driver: *mut OsinfoDeviceDriver) -> *const c_char;
    pub fn osinfo_device_driver_get_devices(
        driver: *mut OsinfoDeviceDriver,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_device_driver_get_files(driver: *mut OsinfoDeviceDriver) -> *mut glib::GList;
    pub fn osinfo_device_driver_get_location(driver: *mut OsinfoDeviceDriver) -> *const c_char;
    pub fn osinfo_device_driver_get_pre_installable(driver: *mut OsinfoDeviceDriver) -> gboolean;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_device_driver_get_priority(driver: *mut OsinfoDeviceDriver) -> i64;
    pub fn osinfo_device_driver_get_signed(driver: *mut OsinfoDeviceDriver) -> gboolean;

    //=========================================================================
    // OsinfoDeviceDriverList
    //=========================================================================
    pub fn osinfo_device_driverlist_get_type() -> GType;
    pub fn osinfo_device_driverlist_new() -> *mut OsinfoDeviceDriverList;

    //=========================================================================
    // OsinfoDeviceLink
    //=========================================================================
    pub fn osinfo_devicelink_get_type() -> GType;
    pub fn osinfo_devicelink_new(target: *mut OsinfoDevice) -> *mut OsinfoDeviceLink;
    pub fn osinfo_devicelink_get_driver(link: *mut OsinfoDeviceLink) -> *const c_char;
    pub fn osinfo_devicelink_get_target(link: *mut OsinfoDeviceLink) -> *mut OsinfoDevice;

    //=========================================================================
    // OsinfoDeviceLinkFilter
    //=========================================================================
    pub fn osinfo_devicelinkfilter_get_type() -> GType;
    pub fn osinfo_devicelinkfilter_new(filter: *mut OsinfoFilter) -> *mut OsinfoDeviceLinkFilter;
    pub fn osinfo_devicelinkfilter_get_target_filter(
        filter: *mut OsinfoDeviceLinkFilter,
    ) -> *mut OsinfoFilter;

    //=========================================================================
    // OsinfoDeviceLinkList
    //=========================================================================
    pub fn osinfo_devicelinklist_get_type() -> GType;
    pub fn osinfo_devicelinklist_new() -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_get_devices(
        list: *mut OsinfoDeviceLinkList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelinklist_new_copy(
        source: *mut OsinfoDeviceLinkList,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_new_filtered(
        source: *mut OsinfoDeviceLinkList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_new_intersection(
        sourceOne: *mut OsinfoDeviceLinkList,
        sourceTwo: *mut OsinfoDeviceLinkList,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_devicelinklist_new_union(
        sourceOne: *mut OsinfoDeviceLinkList,
        sourceTwo: *mut OsinfoDeviceLinkList,
    ) -> *mut OsinfoDeviceLinkList;

    //=========================================================================
    // OsinfoDeviceList
    //=========================================================================
    pub fn osinfo_devicelist_get_type() -> GType;
    pub fn osinfo_devicelist_new() -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_copy(source: *mut OsinfoDeviceList) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_filtered(
        source: *mut OsinfoDeviceList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_intersection(
        sourceOne: *mut OsinfoDeviceList,
        sourceTwo: *mut OsinfoDeviceList,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_devicelist_new_union(
        sourceOne: *mut OsinfoDeviceList,
        sourceTwo: *mut OsinfoDeviceList,
    ) -> *mut OsinfoDeviceList;

    //=========================================================================
    // OsinfoEntity
    //=========================================================================
    pub fn osinfo_entity_get_type() -> GType;
    pub fn osinfo_entity_add_param(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        value: *const c_char,
    );
    pub fn osinfo_entity_clear_param(entity: *mut OsinfoEntity, key: *const c_char);
    pub fn osinfo_entity_get_id(entity: *mut OsinfoEntity) -> *const c_char;
    pub fn osinfo_entity_get_param_keys(entity: *mut OsinfoEntity) -> *mut glib::GList;
    pub fn osinfo_entity_get_param_value(
        entity: *mut OsinfoEntity,
        key: *const c_char,
    ) -> *const c_char;
    pub fn osinfo_entity_get_param_value_boolean(
        entity: *mut OsinfoEntity,
        key: *const c_char,
    ) -> gboolean;
    pub fn osinfo_entity_get_param_value_boolean_with_default(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        default_value: gboolean,
    ) -> gboolean;
    pub fn osinfo_entity_get_param_value_enum(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        enum_type: GType,
        default_value: c_int,
    ) -> c_int;
    pub fn osinfo_entity_get_param_value_int64(
        entity: *mut OsinfoEntity,
        key: *const c_char,
    ) -> i64;
    pub fn osinfo_entity_get_param_value_int64_with_default(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        default_value: i64,
    ) -> i64;
    pub fn osinfo_entity_get_param_value_list(
        entity: *mut OsinfoEntity,
        key: *const c_char,
    ) -> *mut glib::GList;
    pub fn osinfo_entity_set_param(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        value: *const c_char,
    );
    pub fn osinfo_entity_set_param_boolean(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        value: gboolean,
    );
    pub fn osinfo_entity_set_param_enum(
        entity: *mut OsinfoEntity,
        key: *const c_char,
        value: c_int,
        enum_type: GType,
    );
    pub fn osinfo_entity_set_param_int64(entity: *mut OsinfoEntity, key: *const c_char, value: i64);

    //=========================================================================
    // OsinfoFilter
    //=========================================================================
    pub fn osinfo_filter_get_type() -> GType;
    pub fn osinfo_filter_new() -> *mut OsinfoFilter;
    pub fn osinfo_filter_add_constraint(
        filter: *mut OsinfoFilter,
        propName: *const c_char,
        propVal: *const c_char,
    );
    pub fn osinfo_filter_clear_constraint(filter: *mut OsinfoFilter, propName: *const c_char);
    pub fn osinfo_filter_clear_constraints(filter: *mut OsinfoFilter);
    pub fn osinfo_filter_get_constraint_keys(filter: *mut OsinfoFilter) -> *mut glib::GList;
    pub fn osinfo_filter_get_constraint_values(
        filter: *mut OsinfoFilter,
        propName: *const c_char,
    ) -> *mut glib::GList;
    pub fn osinfo_filter_matches(filter: *mut OsinfoFilter, entity: *mut OsinfoEntity) -> gboolean;

    //=========================================================================
    // OsinfoFirmware
    //=========================================================================
    pub fn osinfo_firmware_get_type() -> GType;
    pub fn osinfo_firmware_new(
        id: *const c_char,
        architecture: *const c_char,
        type_: *const c_char,
    ) -> *mut OsinfoFirmware;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_firmware_get_architecture(firmware: *mut OsinfoFirmware) -> *const c_char;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_firmware_get_firmware_type(firmware: *mut OsinfoFirmware) -> *const c_char;
    #[cfg(feature = "v1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_8")))]
    pub fn osinfo_firmware_is_supported(firmware: *mut OsinfoFirmware) -> gboolean;

    //=========================================================================
    // OsinfoFirmwareList
    //=========================================================================
    pub fn osinfo_firmwarelist_get_type() -> GType;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_firmwarelist_new() -> *mut OsinfoFirmwareList;

    //=========================================================================
    // OsinfoImage
    //=========================================================================
    pub fn osinfo_image_get_type() -> GType;
    pub fn osinfo_image_new(
        id: *const c_char,
        architecture: *const c_char,
        format: *const c_char,
    ) -> *mut OsinfoImage;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_image_get_architecture(image: *mut OsinfoImage) -> *const c_char;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_image_get_cloud_init(image: *mut OsinfoImage) -> gboolean;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_image_get_format(image: *mut OsinfoImage) -> *const c_char;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_image_get_os(image: *mut OsinfoImage) -> *mut OsinfoOs;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_image_get_os_variants(image: *mut OsinfoImage) -> *mut OsinfoOsVariantList;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_image_get_url(image: *mut OsinfoImage) -> *const c_char;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_image_set_os(image: *mut OsinfoImage, os: *mut OsinfoOs);

    //=========================================================================
    // OsinfoImageList
    //=========================================================================
    pub fn osinfo_imagelist_get_type() -> GType;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_imagelist_new() -> *mut OsinfoImageList;

    //=========================================================================
    // OsinfoInstallConfig
    //=========================================================================
    pub fn osinfo_install_config_get_type() -> GType;
    pub fn osinfo_install_config_new(id: *const c_char) -> *mut OsinfoInstallConfig;
    pub fn osinfo_install_config_get_admin_password(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_avatar_disk(config: *mut OsinfoInstallConfig)
        -> *const c_char;
    pub fn osinfo_install_config_get_avatar_location(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_driver_signing(config: *mut OsinfoInstallConfig) -> gboolean;
    pub fn osinfo_install_config_get_hardware_arch(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_hostname(config: *mut OsinfoInstallConfig) -> *const c_char;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_install_config_get_installation_url(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_l10n_keyboard(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_l10n_language(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_l10n_timezone(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_post_install_drivers_disk(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_post_install_drivers_location(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_pre_install_drivers_disk(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_pre_install_drivers_location(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_reg_login(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_reg_password(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_reg_product_key(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_script_disk(config: *mut OsinfoInstallConfig)
        -> *const c_char;
    pub fn osinfo_install_config_get_target_disk(config: *mut OsinfoInstallConfig)
        -> *const c_char;
    pub fn osinfo_install_config_get_user_administrator(
        config: *mut OsinfoInstallConfig,
    ) -> gboolean;
    pub fn osinfo_install_config_get_user_autologin(config: *mut OsinfoInstallConfig) -> gboolean;
    pub fn osinfo_install_config_get_user_login(config: *mut OsinfoInstallConfig) -> *const c_char;
    pub fn osinfo_install_config_get_user_password(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_get_user_realname(
        config: *mut OsinfoInstallConfig,
    ) -> *const c_char;
    pub fn osinfo_install_config_set_admin_password(
        config: *mut OsinfoInstallConfig,
        password: *const c_char,
    );
    pub fn osinfo_install_config_set_avatar_disk(
        config: *mut OsinfoInstallConfig,
        disk: *const c_char,
    );
    pub fn osinfo_install_config_set_avatar_location(
        config: *mut OsinfoInstallConfig,
        location: *const c_char,
    );
    pub fn osinfo_install_config_set_driver_signing(
        config: *mut OsinfoInstallConfig,
        signing: gboolean,
    );
    pub fn osinfo_install_config_set_hardware_arch(
        config: *mut OsinfoInstallConfig,
        arch: *const c_char,
    );
    pub fn osinfo_install_config_set_hostname(
        config: *mut OsinfoInstallConfig,
        hostname: *const c_char,
    );
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_install_config_set_installation_url(
        config: *mut OsinfoInstallConfig,
        url: *const c_char,
    );
    pub fn osinfo_install_config_set_l10n_keyboard(
        config: *mut OsinfoInstallConfig,
        keyboard: *const c_char,
    );
    pub fn osinfo_install_config_set_l10n_language(
        config: *mut OsinfoInstallConfig,
        language: *const c_char,
    );
    pub fn osinfo_install_config_set_l10n_timezone(
        config: *mut OsinfoInstallConfig,
        tz: *const c_char,
    );
    pub fn osinfo_install_config_set_post_install_drivers_disk(
        config: *mut OsinfoInstallConfig,
        disk: *const c_char,
    );
    pub fn osinfo_install_config_set_post_install_drivers_location(
        config: *mut OsinfoInstallConfig,
        location: *const c_char,
    );
    pub fn osinfo_install_config_set_pre_install_drivers_disk(
        config: *mut OsinfoInstallConfig,
        disk: *const c_char,
    );
    pub fn osinfo_install_config_set_pre_install_drivers_location(
        config: *mut OsinfoInstallConfig,
        location: *const c_char,
    );
    pub fn osinfo_install_config_set_reg_login(
        config: *mut OsinfoInstallConfig,
        name: *const c_char,
    );
    pub fn osinfo_install_config_set_reg_password(
        config: *mut OsinfoInstallConfig,
        password: *const c_char,
    );
    pub fn osinfo_install_config_set_reg_product_key(
        config: *mut OsinfoInstallConfig,
        key: *const c_char,
    );
    pub fn osinfo_install_config_set_script_disk(
        config: *mut OsinfoInstallConfig,
        disk: *const c_char,
    );
    pub fn osinfo_install_config_set_target_disk(
        config: *mut OsinfoInstallConfig,
        disk: *const c_char,
    );
    pub fn osinfo_install_config_set_user_administrator(
        config: *mut OsinfoInstallConfig,
        admin: gboolean,
    );
    pub fn osinfo_install_config_set_user_autologin(
        config: *mut OsinfoInstallConfig,
        autologin: gboolean,
    );
    pub fn osinfo_install_config_set_user_login(
        config: *mut OsinfoInstallConfig,
        username: *const c_char,
    );
    pub fn osinfo_install_config_set_user_password(
        config: *mut OsinfoInstallConfig,
        password: *const c_char,
    );
    pub fn osinfo_install_config_set_user_realname(
        config: *mut OsinfoInstallConfig,
        name: *const c_char,
    );

    //=========================================================================
    // OsinfoInstallConfigParam
    //=========================================================================
    pub fn osinfo_install_config_param_get_type() -> GType;
    pub fn osinfo_install_config_param_new(name: *const c_char) -> *mut OsinfoInstallConfigParam;
    pub fn osinfo_install_config_param_get_name(
        config_param: *mut OsinfoInstallConfigParam,
    ) -> *const c_char;
    pub fn osinfo_install_config_param_get_policy(
        config_param: *mut OsinfoInstallConfigParam,
    ) -> OsinfoInstallConfigParamPolicy;
    pub fn osinfo_install_config_param_get_value_map(
        config_param: *mut OsinfoInstallConfigParam,
    ) -> *mut OsinfoDatamap;
    pub fn osinfo_install_config_param_is_optional(
        config_param: *mut OsinfoInstallConfigParam,
    ) -> gboolean;
    pub fn osinfo_install_config_param_is_required(
        config_param: *mut OsinfoInstallConfigParam,
    ) -> gboolean;
    pub fn osinfo_install_config_param_set_value_map(
        config_param: *mut OsinfoInstallConfigParam,
        datamap: *mut OsinfoDatamap,
    );

    //=========================================================================
    // OsinfoInstallConfigParamList
    //=========================================================================
    pub fn osinfo_install_config_paramlist_get_type() -> GType;
    pub fn osinfo_install_config_paramlist_new() -> *mut OsinfoInstallConfigParamList;

    //=========================================================================
    // OsinfoInstallScript
    //=========================================================================
    pub fn osinfo_install_script_get_type() -> GType;
    pub fn osinfo_install_script_new(id: *const c_char) -> *mut OsinfoInstallScript;
    pub fn osinfo_install_script_new_data(
        id: *const c_char,
        profile: *const c_char,
        templateData: *const c_char,
    ) -> *mut OsinfoInstallScript;
    pub fn osinfo_install_script_new_uri(
        id: *const c_char,
        profile: *const c_char,
        templateUri: *const c_char,
    ) -> *mut OsinfoInstallScript;
    pub fn osinfo_install_script_generate(
        script: *mut OsinfoInstallScript,
        os: *mut OsinfoOs,
        config: *mut OsinfoInstallConfig,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut c_char;
    pub fn osinfo_install_script_generate_async(
        script: *mut OsinfoInstallScript,
        os: *mut OsinfoOs,
        config: *mut OsinfoInstallConfig,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn osinfo_install_script_generate_command_line(
        script: *mut OsinfoInstallScript,
        os: *mut OsinfoOs,
        config: *mut OsinfoInstallConfig,
    ) -> *mut c_char;
    pub fn osinfo_install_script_generate_command_line_for_media(
        script: *mut OsinfoInstallScript,
        media: *mut OsinfoMedia,
        config: *mut OsinfoInstallConfig,
    ) -> *mut c_char;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_command_line_for_tree(
        script: *mut OsinfoInstallScript,
        tree: *mut OsinfoTree,
        config: *mut OsinfoInstallConfig,
    ) -> *mut c_char;
    pub fn osinfo_install_script_generate_finish(
        script: *mut OsinfoInstallScript,
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut c_char;
    pub fn osinfo_install_script_generate_for_media(
        script: *mut OsinfoInstallScript,
        media: *mut OsinfoMedia,
        config: *mut OsinfoInstallConfig,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut c_char;
    pub fn osinfo_install_script_generate_for_media_async(
        script: *mut OsinfoInstallScript,
        media: *mut OsinfoMedia,
        config: *mut OsinfoInstallConfig,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn osinfo_install_script_generate_for_media_finish(
        script: *mut OsinfoInstallScript,
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut c_char;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_for_tree(
        script: *mut OsinfoInstallScript,
        tree: *mut OsinfoTree,
        config: *mut OsinfoInstallConfig,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut c_char;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_for_tree_async(
        script: *mut OsinfoInstallScript,
        tree: *mut OsinfoTree,
        config: *mut OsinfoInstallConfig,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_for_tree_finish(
        script: *mut OsinfoInstallScript,
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut c_char;
    pub fn osinfo_install_script_generate_output(
        script: *mut OsinfoInstallScript,
        os: *mut OsinfoOs,
        config: *mut OsinfoInstallConfig,
        output_dir: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GFile;
    pub fn osinfo_install_script_generate_output_async(
        script: *mut OsinfoInstallScript,
        os: *mut OsinfoOs,
        config: *mut OsinfoInstallConfig,
        output_dir: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn osinfo_install_script_generate_output_finish(
        script: *mut OsinfoInstallScript,
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GFile;
    pub fn osinfo_install_script_generate_output_for_media(
        script: *mut OsinfoInstallScript,
        media: *mut OsinfoMedia,
        config: *mut OsinfoInstallConfig,
        output_dir: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GFile;
    pub fn osinfo_install_script_generate_output_for_media_async(
        script: *mut OsinfoInstallScript,
        media: *mut OsinfoMedia,
        config: *mut OsinfoInstallConfig,
        output_dir: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn osinfo_install_script_generate_output_for_media_finish(
        script: *mut OsinfoInstallScript,
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GFile;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_output_for_tree(
        script: *mut OsinfoInstallScript,
        tree: *mut OsinfoTree,
        config: *mut OsinfoInstallConfig,
        output_dir: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GFile;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_output_for_tree_async(
        script: *mut OsinfoInstallScript,
        tree: *mut OsinfoTree,
        config: *mut OsinfoInstallConfig,
        output_dir: *mut gio::GFile,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_install_script_generate_output_for_tree_finish(
        script: *mut OsinfoInstallScript,
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut gio::GFile;
    pub fn osinfo_install_script_get_avatar_format(
        script: *mut OsinfoInstallScript,
    ) -> *mut OsinfoAvatarFormat;
    pub fn osinfo_install_script_get_can_post_install_drivers(
        script: *mut OsinfoInstallScript,
    ) -> gboolean;
    pub fn osinfo_install_script_get_can_pre_install_drivers(
        script: *mut OsinfoInstallScript,
    ) -> gboolean;
    pub fn osinfo_install_script_get_config_param(
        script: *mut OsinfoInstallScript,
        name: *const c_char,
    ) -> *mut OsinfoInstallConfigParam;
    pub fn osinfo_install_script_get_config_param_list(
        script: *mut OsinfoInstallScript,
    ) -> *mut glib::GList;
    pub fn osinfo_install_script_get_config_params(
        script: *mut OsinfoInstallScript,
    ) -> *mut OsinfoInstallConfigParamList;
    pub fn osinfo_install_script_get_expected_filename(
        script: *mut OsinfoInstallScript,
    ) -> *const c_char;
    pub fn osinfo_install_script_get_injection_methods(script: *mut OsinfoInstallScript) -> u32;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_install_script_get_installation_source(
        script: *mut OsinfoInstallScript,
    ) -> OsinfoInstallScriptInstallationSource;
    pub fn osinfo_install_script_get_needs_internet(script: *mut OsinfoInstallScript) -> gboolean;
    pub fn osinfo_install_script_get_output_filename(
        script: *mut OsinfoInstallScript,
    ) -> *const c_char;
    pub fn osinfo_install_script_get_output_prefix(
        script: *mut OsinfoInstallScript,
    ) -> *const c_char;
    pub fn osinfo_install_script_get_path_format(
        script: *mut OsinfoInstallScript,
    ) -> OsinfoPathFormat;
    pub fn osinfo_install_script_get_post_install_drivers_signing_req(
        script: *mut OsinfoInstallScript,
    ) -> i32;
    pub fn osinfo_install_script_get_pre_install_drivers_signing_req(
        script: *mut OsinfoInstallScript,
    ) -> i32;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_install_script_get_preferred_injection_method(
        script: *mut OsinfoInstallScript,
    ) -> OsinfoInstallScriptInjectionMethod;
    pub fn osinfo_install_script_get_product_key_format(
        script: *mut OsinfoInstallScript,
    ) -> *const c_char;
    pub fn osinfo_install_script_get_profile(script: *mut OsinfoInstallScript) -> *const c_char;
    pub fn osinfo_install_script_get_template_data(
        script: *mut OsinfoInstallScript,
    ) -> *const c_char;
    pub fn osinfo_install_script_get_template_uri(
        script: *mut OsinfoInstallScript,
    ) -> *const c_char;
    pub fn osinfo_install_script_has_config_param(
        script: *mut OsinfoInstallScript,
        config_param: *mut OsinfoInstallConfigParam,
    ) -> gboolean;
    pub fn osinfo_install_script_has_config_param_name(
        script: *mut OsinfoInstallScript,
        name: *const c_char,
    ) -> gboolean;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_install_script_set_installation_source(
        script: *mut OsinfoInstallScript,
        source: OsinfoInstallScriptInstallationSource,
    );
    pub fn osinfo_install_script_set_output_prefix(
        script: *mut OsinfoInstallScript,
        prefix: *const c_char,
    );
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_install_script_set_preferred_injection_method(
        script: *mut OsinfoInstallScript,
        method: OsinfoInstallScriptInjectionMethod,
    );

    //=========================================================================
    // OsinfoInstallScriptList
    //=========================================================================
    pub fn osinfo_install_scriptlist_get_type() -> GType;
    pub fn osinfo_install_scriptlist_new() -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_copy(
        source: *mut OsinfoInstallScriptList,
    ) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_filtered(
        source: *mut OsinfoInstallScriptList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_intersection(
        sourceOne: *mut OsinfoInstallScriptList,
        sourceTwo: *mut OsinfoInstallScriptList,
    ) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_install_scriptlist_new_union(
        sourceOne: *mut OsinfoInstallScriptList,
        sourceTwo: *mut OsinfoInstallScriptList,
    ) -> *mut OsinfoInstallScriptList;

    //=========================================================================
    // OsinfoList
    //=========================================================================
    pub fn osinfo_list_get_type() -> GType;
    pub fn osinfo_list_add(list: *mut OsinfoList, entity: *mut OsinfoEntity);
    pub fn osinfo_list_add_all(list: *mut OsinfoList, source: *mut OsinfoList);
    pub fn osinfo_list_add_filtered(
        list: *mut OsinfoList,
        source: *mut OsinfoList,
        filter: *mut OsinfoFilter,
    );
    pub fn osinfo_list_add_intersection(
        list: *mut OsinfoList,
        sourceOne: *mut OsinfoList,
        sourceTwo: *mut OsinfoList,
    );
    pub fn osinfo_list_add_union(
        list: *mut OsinfoList,
        sourceOne: *mut OsinfoList,
        sourceTwo: *mut OsinfoList,
    );
    pub fn osinfo_list_find_by_id(list: *mut OsinfoList, id: *const c_char) -> *mut OsinfoEntity;
    pub fn osinfo_list_get_element_type(list: *mut OsinfoList) -> GType;
    pub fn osinfo_list_get_elements(list: *mut OsinfoList) -> *mut glib::GList;
    pub fn osinfo_list_get_length(list: *mut OsinfoList) -> c_int;
    pub fn osinfo_list_get_nth(list: *mut OsinfoList, idx: c_int) -> *mut OsinfoEntity;
    pub fn osinfo_list_new_copy(source: *mut OsinfoList) -> *mut OsinfoList;
    pub fn osinfo_list_new_filtered(
        source: *mut OsinfoList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoList;
    pub fn osinfo_list_new_intersection(
        sourceOne: *mut OsinfoList,
        sourceTwo: *mut OsinfoList,
    ) -> *mut OsinfoList;
    pub fn osinfo_list_new_union(
        sourceOne: *mut OsinfoList,
        sourceTwo: *mut OsinfoList,
    ) -> *mut OsinfoList;

    //=========================================================================
    // OsinfoLoader
    //=========================================================================
    pub fn osinfo_loader_get_type() -> GType;
    pub fn osinfo_loader_new() -> *mut OsinfoLoader;
    pub fn osinfo_loader_get_db(loader: *mut OsinfoLoader) -> *mut OsinfoDb;
    pub fn osinfo_loader_process_default_path(
        loader: *mut OsinfoLoader,
        error: *mut *mut glib::GError,
    );
    pub fn osinfo_loader_process_local_path(
        loader: *mut OsinfoLoader,
        error: *mut *mut glib::GError,
    );
    pub fn osinfo_loader_process_path(
        loader: *mut OsinfoLoader,
        path: *const c_char,
        error: *mut *mut glib::GError,
    );
    pub fn osinfo_loader_process_system_path(
        loader: *mut OsinfoLoader,
        error: *mut *mut glib::GError,
    );
    pub fn osinfo_loader_process_uri(
        loader: *mut OsinfoLoader,
        uri: *const c_char,
        error: *mut *mut glib::GError,
    );
    pub fn osinfo_loader_process_user_path(
        loader: *mut OsinfoLoader,
        error: *mut *mut glib::GError,
    );

    //=========================================================================
    // OsinfoMedia
    //=========================================================================
    pub fn osinfo_media_get_type() -> GType;
    pub fn osinfo_media_new(id: *const c_char, architecture: *const c_char) -> *mut OsinfoMedia;
    pub fn osinfo_media_create_from_location(
        location: *const c_char,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoMedia;
    pub fn osinfo_media_create_from_location_async(
        location: *const c_char,
        priority: c_int,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_media_create_from_location_finish(
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoMedia;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_media_create_from_location_with_flags(
        location: *const c_char,
        cancellable: *mut gio::GCancellable,
        flags: c_uint,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoMedia;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_media_create_from_location_with_flags_async(
        location: *const c_char,
        priority: c_int,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        flags: c_uint,
        user_data: gpointer,
    );
    pub fn osinfo_media_create_from_location_with_flags_finish(
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoMedia;
    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    pub fn osinfo_media_add_install_script(
        media: *mut OsinfoMedia,
        script: *mut OsinfoInstallScript,
    );
    pub fn osinfo_media_get_application_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_architecture(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_eject_after_install(media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_media_get_initrd_path(media: *mut OsinfoMedia) -> *const c_char;
    #[cfg(feature = "v1_4")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_4")))]
    pub fn osinfo_media_get_install_script_list(
        media: *mut OsinfoMedia,
    ) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_media_get_installer(media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_media_get_installer_reboots(media: *mut OsinfoMedia) -> c_int;
    pub fn osinfo_media_get_kernel_path(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_languages(media: *mut OsinfoMedia) -> *mut glib::GList;
    pub fn osinfo_media_get_live(media: *mut OsinfoMedia) -> gboolean;
    pub fn osinfo_media_get_os(media: *mut OsinfoMedia) -> *mut OsinfoOs;
    pub fn osinfo_media_get_os_variants(media: *mut OsinfoMedia) -> *mut OsinfoOsVariantList;
    pub fn osinfo_media_get_publisher_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_system_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_url(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_volume_id(media: *mut OsinfoMedia) -> *const c_char;
    pub fn osinfo_media_get_volume_size(media: *mut OsinfoMedia) -> i64;
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    pub fn osinfo_media_is_bootable(media: *mut OsinfoMedia) -> gboolean;
    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    pub fn osinfo_media_matches(media: *mut OsinfoMedia, reference: *mut OsinfoMedia) -> gboolean;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_media_supports_installer_script(media: *mut OsinfoMedia) -> gboolean;

    //=========================================================================
    // OsinfoMediaList
    //=========================================================================
    pub fn osinfo_medialist_get_type() -> GType;
    pub fn osinfo_medialist_new() -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_copy(source: *mut OsinfoMediaList) -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_filtered(
        source: *mut OsinfoMediaList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_intersection(
        sourceOne: *mut OsinfoMediaList,
        sourceTwo: *mut OsinfoMediaList,
    ) -> *mut OsinfoMediaList;
    pub fn osinfo_medialist_new_union(
        sourceOne: *mut OsinfoMediaList,
        sourceTwo: *mut OsinfoMediaList,
    ) -> *mut OsinfoMediaList;

    //=========================================================================
    // OsinfoOs
    //=========================================================================
    pub fn osinfo_os_get_type() -> GType;
    pub fn osinfo_os_new(id: *const c_char) -> *mut OsinfoOs;
    pub fn osinfo_os_add_device(os: *mut OsinfoOs, dev: *mut OsinfoDevice)
        -> *mut OsinfoDeviceLink;
    pub fn osinfo_os_add_device_driver(os: *mut OsinfoOs, driver: *mut OsinfoDeviceDriver);
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_os_add_firmware(os: *mut OsinfoOs, firmware: *mut OsinfoFirmware);
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_add_image(os: *mut OsinfoOs, image: *mut OsinfoImage);
    pub fn osinfo_os_add_install_script(os: *mut OsinfoOs, script: *mut OsinfoInstallScript);
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_add_maximum_resources(os: *mut OsinfoOs, resources: *mut OsinfoResources);
    pub fn osinfo_os_add_media(os: *mut OsinfoOs, media: *mut OsinfoMedia);
    pub fn osinfo_os_add_minimum_resources(os: *mut OsinfoOs, resources: *mut OsinfoResources);
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_add_network_install_resources(
        os: *mut OsinfoOs,
        resources: *mut OsinfoResources,
    );
    pub fn osinfo_os_add_recommended_resources(os: *mut OsinfoOs, resources: *mut OsinfoResources);
    pub fn osinfo_os_add_tree(os: *mut OsinfoOs, tree: *mut OsinfoTree);
    pub fn osinfo_os_add_variant(os: *mut OsinfoOs, variant: *mut OsinfoOsVariant);
    pub fn osinfo_os_find_install_script(
        os: *mut OsinfoOs,
        profile: *const c_char,
    ) -> *mut OsinfoInstallScript;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_get_all_device_links(
        os: *mut OsinfoOs,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_os_get_all_devices(
        os: *mut OsinfoOs,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_os_get_cloud_image_username(os: *mut OsinfoOs) -> *const c_char;
    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    pub fn osinfo_os_get_complete_firmware_list(
        os: *mut OsinfoOs,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoFirmwareList;
    pub fn osinfo_os_get_device_drivers(os: *mut OsinfoOs) -> *mut OsinfoDeviceDriverList;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_os_get_device_drivers_prioritized(
        os: *mut OsinfoOs,
    ) -> *mut OsinfoDeviceDriverList;
    pub fn osinfo_os_get_device_links(
        os: *mut OsinfoOs,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_os_get_devices(
        os: *mut OsinfoOs,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_os_get_devices_by_property(
        os: *mut OsinfoOs,
        property: *const c_char,
        value: *const c_char,
        inherited: gboolean,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_os_get_distro(os: *mut OsinfoOs) -> *const c_char;
    pub fn osinfo_os_get_family(os: *mut OsinfoOs) -> *const c_char;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_os_get_firmware_list(
        os: *mut OsinfoOs,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoFirmwareList;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_get_image_list(os: *mut OsinfoOs) -> *mut OsinfoImageList;
    pub fn osinfo_os_get_install_script_list(os: *mut OsinfoOs) -> *mut OsinfoInstallScriptList;
    pub fn osinfo_os_get_kernel_url_argument(os: *mut OsinfoOs) -> *const c_char;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_get_maximum_resources(os: *mut OsinfoOs) -> *mut OsinfoResourcesList;
    pub fn osinfo_os_get_media_list(os: *mut OsinfoOs) -> *mut OsinfoMediaList;
    pub fn osinfo_os_get_minimum_resources(os: *mut OsinfoOs) -> *mut OsinfoResourcesList;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_os_get_network_install_resources(os: *mut OsinfoOs) -> *mut OsinfoResourcesList;
    pub fn osinfo_os_get_recommended_resources(os: *mut OsinfoOs) -> *mut OsinfoResourcesList;
    pub fn osinfo_os_get_release_status(os: *mut OsinfoOs) -> *mut OsinfoReleaseStatus;
    pub fn osinfo_os_get_tree_list(os: *mut OsinfoOs) -> *mut OsinfoTreeList;
    pub fn osinfo_os_get_variant_list(os: *mut OsinfoOs) -> *mut OsinfoOsVariantList;

    //=========================================================================
    // OsinfoOsList
    //=========================================================================
    pub fn osinfo_oslist_get_type() -> GType;
    pub fn osinfo_oslist_new() -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_copy(source: *mut OsinfoOsList) -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_filtered(
        source: *mut OsinfoOsList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_intersection(
        sourceOne: *mut OsinfoOsList,
        sourceTwo: *mut OsinfoOsList,
    ) -> *mut OsinfoOsList;
    pub fn osinfo_oslist_new_union(
        sourceOne: *mut OsinfoOsList,
        sourceTwo: *mut OsinfoOsList,
    ) -> *mut OsinfoOsList;

    //=========================================================================
    // OsinfoOsVariant
    //=========================================================================
    pub fn osinfo_os_variant_get_type() -> GType;
    pub fn osinfo_os_variant_new(id: *const c_char) -> *mut OsinfoOsVariant;
    pub fn osinfo_os_variant_get_name(variant: *mut OsinfoOsVariant) -> *const c_char;

    //=========================================================================
    // OsinfoOsVariantList
    //=========================================================================
    pub fn osinfo_os_variantlist_get_type() -> GType;
    pub fn osinfo_os_variantlist_new() -> *mut OsinfoOsVariantList;

    //=========================================================================
    // OsinfoPlatform
    //=========================================================================
    pub fn osinfo_platform_get_type() -> GType;
    pub fn osinfo_platform_new(id: *const c_char) -> *mut OsinfoPlatform;
    pub fn osinfo_platform_add_device(
        platform: *mut OsinfoPlatform,
        dev: *mut OsinfoDevice,
    ) -> *mut OsinfoDeviceLink;
    pub fn osinfo_platform_get_all_devices(
        platform: *mut OsinfoPlatform,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;
    pub fn osinfo_platform_get_device_links(
        platform: *mut OsinfoPlatform,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceLinkList;
    pub fn osinfo_platform_get_devices(
        platform: *mut OsinfoPlatform,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoDeviceList;

    //=========================================================================
    // OsinfoPlatformList
    //=========================================================================
    pub fn osinfo_platformlist_get_type() -> GType;
    pub fn osinfo_platformlist_new() -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_copy(source: *mut OsinfoPlatformList)
        -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_filtered(
        source: *mut OsinfoPlatformList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_intersection(
        sourceOne: *mut OsinfoPlatformList,
        sourceTwo: *mut OsinfoPlatformList,
    ) -> *mut OsinfoPlatformList;
    pub fn osinfo_platformlist_new_union(
        sourceOne: *mut OsinfoPlatformList,
        sourceTwo: *mut OsinfoPlatformList,
    ) -> *mut OsinfoPlatformList;

    //=========================================================================
    // OsinfoProduct
    //=========================================================================
    pub fn osinfo_product_get_type() -> GType;
    pub fn osinfo_product_add_related(
        product: *mut OsinfoProduct,
        relshp: OsinfoProductRelationship,
        otherproduct: *mut OsinfoProduct,
    );
    pub fn osinfo_product_get_codename(product: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_eol_date(product: *mut OsinfoProduct) -> *mut glib::GDate;
    pub fn osinfo_product_get_eol_date_string(product: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_logo(product: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_name(product: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_related(
        product: *mut OsinfoProduct,
        relshp: OsinfoProductRelationship,
    ) -> *mut OsinfoProductList;
    pub fn osinfo_product_get_release_date(product: *mut OsinfoProduct) -> *mut glib::GDate;
    pub fn osinfo_product_get_release_date_string(product: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_short_id(product: *mut OsinfoProduct) -> *const c_char;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_product_get_short_id_list(product: *mut OsinfoProduct) -> *mut glib::GList;
    pub fn osinfo_product_get_vendor(product: *mut OsinfoProduct) -> *const c_char;
    pub fn osinfo_product_get_version(product: *mut OsinfoProduct) -> *const c_char;

    //=========================================================================
    // OsinfoProductFilter
    //=========================================================================
    pub fn osinfo_productfilter_get_type() -> GType;
    pub fn osinfo_productfilter_new() -> *mut OsinfoProductFilter;
    pub fn osinfo_productfilter_add_product_constraint(
        productfilter: *mut OsinfoProductFilter,
        relshp: OsinfoProductRelationship,
        product: *mut OsinfoProduct,
    ) -> c_int;
    pub fn osinfo_productfilter_add_support_date_constraint(
        productfilter: *mut OsinfoProductFilter,
        when: *mut glib::GDate,
    );
    pub fn osinfo_productfilter_clear_product_constraint(
        productfilter: *mut OsinfoProductFilter,
        relshp: OsinfoProductRelationship,
    );
    pub fn osinfo_productfilter_clear_product_constraints(productfilter: *mut OsinfoProductFilter);
    pub fn osinfo_productfilter_get_product_constraint_values(
        productfilter: *mut OsinfoProductFilter,
        relshp: OsinfoProductRelationship,
    ) -> *mut glib::GList;

    //=========================================================================
    // OsinfoProductList
    //=========================================================================
    pub fn osinfo_productlist_get_type() -> GType;
    pub fn osinfo_productlist_new() -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_copy(source: *mut OsinfoProductList) -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_filtered(
        source: *mut OsinfoProductList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_intersection(
        sourceOne: *mut OsinfoProductList,
        sourceTwo: *mut OsinfoProductList,
    ) -> *mut OsinfoProductList;
    pub fn osinfo_productlist_new_union(
        sourceOne: *mut OsinfoProductList,
        sourceTwo: *mut OsinfoProductList,
    ) -> *mut OsinfoProductList;

    //=========================================================================
    // OsinfoResources
    //=========================================================================
    pub fn osinfo_resources_get_type() -> GType;
    pub fn osinfo_resources_new(
        id: *const c_char,
        architecture: *const c_char,
    ) -> *mut OsinfoResources;
    pub fn osinfo_resources_get_architecture(resources: *mut OsinfoResources) -> *const c_char;
    pub fn osinfo_resources_get_cpu(resources: *mut OsinfoResources) -> i64;
    pub fn osinfo_resources_get_n_cpus(resources: *mut OsinfoResources) -> c_int;
    pub fn osinfo_resources_get_ram(resources: *mut OsinfoResources) -> i64;
    pub fn osinfo_resources_get_storage(resources: *mut OsinfoResources) -> i64;
    pub fn osinfo_resources_set_cpu(resources: *mut OsinfoResources, cpu: i64);
    pub fn osinfo_resources_set_n_cpus(resources: *mut OsinfoResources, n_cpus: c_int);
    pub fn osinfo_resources_set_ram(resources: *mut OsinfoResources, ram: i64);
    pub fn osinfo_resources_set_storage(resources: *mut OsinfoResources, storage: i64);

    //=========================================================================
    // OsinfoResourcesList
    //=========================================================================
    pub fn osinfo_resourceslist_get_type() -> GType;
    pub fn osinfo_resourceslist_new() -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_copy(
        source: *mut OsinfoResourcesList,
    ) -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_filtered(
        source: *mut OsinfoResourcesList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_intersection(
        sourceOne: *mut OsinfoResourcesList,
        sourceTwo: *mut OsinfoResourcesList,
    ) -> *mut OsinfoResourcesList;
    pub fn osinfo_resourceslist_new_union(
        sourceOne: *mut OsinfoResourcesList,
        sourceTwo: *mut OsinfoResourcesList,
    ) -> *mut OsinfoResourcesList;

    //=========================================================================
    // OsinfoTree
    //=========================================================================
    pub fn osinfo_tree_get_type() -> GType;
    pub fn osinfo_tree_new(id: *const c_char, architecture: *const c_char) -> *mut OsinfoTree;
    pub fn osinfo_tree_create_from_location(
        location: *const c_char,
        cancellable: *mut gio::GCancellable,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoTree;
    pub fn osinfo_tree_create_from_location_async(
        location: *const c_char,
        priority: c_int,
        cancellable: *mut gio::GCancellable,
        callback: gio::GAsyncReadyCallback,
        user_data: gpointer,
    );
    pub fn osinfo_tree_create_from_location_finish(
        res: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoTree;
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    pub fn osinfo_tree_create_from_treeinfo(
        treeinfo: *const c_char,
        location: *const c_char,
        error: *mut *mut glib::GError,
    ) -> *mut OsinfoTree;
    pub fn osinfo_tree_get_architecture(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_boot_iso_path(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_initrd_path(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_kernel_path(tree: *mut OsinfoTree) -> *const c_char;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_tree_get_os(tree: *mut OsinfoTree) -> *mut OsinfoOs;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_tree_get_os_variants(tree: *mut OsinfoTree) -> *mut OsinfoOsVariantList;
    pub fn osinfo_tree_get_treeinfo_arch(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_family(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_variant(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_treeinfo_version(tree: *mut OsinfoTree) -> *const c_char;
    pub fn osinfo_tree_get_url(tree: *mut OsinfoTree) -> *const c_char;
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    pub fn osinfo_tree_has_treeinfo(tree: *mut OsinfoTree) -> gboolean;
    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    pub fn osinfo_tree_matches(tree: *mut OsinfoTree, reference: *mut OsinfoTree) -> gboolean;
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    pub fn osinfo_tree_set_os(tree: *mut OsinfoTree, os: *mut OsinfoOs);

    //=========================================================================
    // OsinfoTreeList
    //=========================================================================
    pub fn osinfo_treelist_get_type() -> GType;
    pub fn osinfo_treelist_new() -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_copy(source: *mut OsinfoTreeList) -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_filtered(
        source: *mut OsinfoTreeList,
        filter: *mut OsinfoFilter,
    ) -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_intersection(
        sourceOne: *mut OsinfoTreeList,
        sourceTwo: *mut OsinfoTreeList,
    ) -> *mut OsinfoTreeList;
    pub fn osinfo_treelist_new_union(
        sourceOne: *mut OsinfoTreeList,
        sourceTwo: *mut OsinfoTreeList,
    ) -> *mut OsinfoTreeList;

}
