// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../../girs
// DO NOT EDIT

#![cfg(unix)]

use libosinfo_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::{Command, Stdio};
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["libosinfo-1.0"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut cmd = Command::new(exe);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }

    Ok(String::from_utf8(out.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("OsinfoAvatarFormat", Layout {size: size_of::<OsinfoAvatarFormat>(), alignment: align_of::<OsinfoAvatarFormat>()}),
    ("OsinfoAvatarFormatClass", Layout {size: size_of::<OsinfoAvatarFormatClass>(), alignment: align_of::<OsinfoAvatarFormatClass>()}),
    ("OsinfoDatamap", Layout {size: size_of::<OsinfoDatamap>(), alignment: align_of::<OsinfoDatamap>()}),
    ("OsinfoDatamapClass", Layout {size: size_of::<OsinfoDatamapClass>(), alignment: align_of::<OsinfoDatamapClass>()}),
    ("OsinfoDatamapList", Layout {size: size_of::<OsinfoDatamapList>(), alignment: align_of::<OsinfoDatamapList>()}),
    ("OsinfoDatamapListClass", Layout {size: size_of::<OsinfoDatamapListClass>(), alignment: align_of::<OsinfoDatamapListClass>()}),
    ("OsinfoDb", Layout {size: size_of::<OsinfoDb>(), alignment: align_of::<OsinfoDb>()}),
    ("OsinfoDbClass", Layout {size: size_of::<OsinfoDbClass>(), alignment: align_of::<OsinfoDbClass>()}),
    ("OsinfoDeployment", Layout {size: size_of::<OsinfoDeployment>(), alignment: align_of::<OsinfoDeployment>()}),
    ("OsinfoDeploymentClass", Layout {size: size_of::<OsinfoDeploymentClass>(), alignment: align_of::<OsinfoDeploymentClass>()}),
    ("OsinfoDeploymentList", Layout {size: size_of::<OsinfoDeploymentList>(), alignment: align_of::<OsinfoDeploymentList>()}),
    ("OsinfoDeploymentListClass", Layout {size: size_of::<OsinfoDeploymentListClass>(), alignment: align_of::<OsinfoDeploymentListClass>()}),
    ("OsinfoDevice", Layout {size: size_of::<OsinfoDevice>(), alignment: align_of::<OsinfoDevice>()}),
    ("OsinfoDeviceClass", Layout {size: size_of::<OsinfoDeviceClass>(), alignment: align_of::<OsinfoDeviceClass>()}),
    ("OsinfoDeviceDriver", Layout {size: size_of::<OsinfoDeviceDriver>(), alignment: align_of::<OsinfoDeviceDriver>()}),
    ("OsinfoDeviceDriverClass", Layout {size: size_of::<OsinfoDeviceDriverClass>(), alignment: align_of::<OsinfoDeviceDriverClass>()}),
    ("OsinfoDeviceDriverList", Layout {size: size_of::<OsinfoDeviceDriverList>(), alignment: align_of::<OsinfoDeviceDriverList>()}),
    ("OsinfoDeviceDriverListClass", Layout {size: size_of::<OsinfoDeviceDriverListClass>(), alignment: align_of::<OsinfoDeviceDriverListClass>()}),
    ("OsinfoDeviceDriverSigningReq", Layout {size: size_of::<OsinfoDeviceDriverSigningReq>(), alignment: align_of::<OsinfoDeviceDriverSigningReq>()}),
    ("OsinfoDeviceLink", Layout {size: size_of::<OsinfoDeviceLink>(), alignment: align_of::<OsinfoDeviceLink>()}),
    ("OsinfoDeviceLinkClass", Layout {size: size_of::<OsinfoDeviceLinkClass>(), alignment: align_of::<OsinfoDeviceLinkClass>()}),
    ("OsinfoDeviceLinkFilter", Layout {size: size_of::<OsinfoDeviceLinkFilter>(), alignment: align_of::<OsinfoDeviceLinkFilter>()}),
    ("OsinfoDeviceLinkFilterClass", Layout {size: size_of::<OsinfoDeviceLinkFilterClass>(), alignment: align_of::<OsinfoDeviceLinkFilterClass>()}),
    ("OsinfoDeviceLinkList", Layout {size: size_of::<OsinfoDeviceLinkList>(), alignment: align_of::<OsinfoDeviceLinkList>()}),
    ("OsinfoDeviceLinkListClass", Layout {size: size_of::<OsinfoDeviceLinkListClass>(), alignment: align_of::<OsinfoDeviceLinkListClass>()}),
    ("OsinfoDeviceList", Layout {size: size_of::<OsinfoDeviceList>(), alignment: align_of::<OsinfoDeviceList>()}),
    ("OsinfoDeviceListClass", Layout {size: size_of::<OsinfoDeviceListClass>(), alignment: align_of::<OsinfoDeviceListClass>()}),
    ("OsinfoEntity", Layout {size: size_of::<OsinfoEntity>(), alignment: align_of::<OsinfoEntity>()}),
    ("OsinfoEntityClass", Layout {size: size_of::<OsinfoEntityClass>(), alignment: align_of::<OsinfoEntityClass>()}),
    ("OsinfoError", Layout {size: size_of::<OsinfoError>(), alignment: align_of::<OsinfoError>()}),
    ("OsinfoFilter", Layout {size: size_of::<OsinfoFilter>(), alignment: align_of::<OsinfoFilter>()}),
    ("OsinfoFilterClass", Layout {size: size_of::<OsinfoFilterClass>(), alignment: align_of::<OsinfoFilterClass>()}),
    ("OsinfoFirmware", Layout {size: size_of::<OsinfoFirmware>(), alignment: align_of::<OsinfoFirmware>()}),
    ("OsinfoFirmwareClass", Layout {size: size_of::<OsinfoFirmwareClass>(), alignment: align_of::<OsinfoFirmwareClass>()}),
    ("OsinfoFirmwareList", Layout {size: size_of::<OsinfoFirmwareList>(), alignment: align_of::<OsinfoFirmwareList>()}),
    ("OsinfoFirmwareListClass", Layout {size: size_of::<OsinfoFirmwareListClass>(), alignment: align_of::<OsinfoFirmwareListClass>()}),
    ("OsinfoImage", Layout {size: size_of::<OsinfoImage>(), alignment: align_of::<OsinfoImage>()}),
    ("OsinfoImageClass", Layout {size: size_of::<OsinfoImageClass>(), alignment: align_of::<OsinfoImageClass>()}),
    ("OsinfoImageList", Layout {size: size_of::<OsinfoImageList>(), alignment: align_of::<OsinfoImageList>()}),
    ("OsinfoImageListClass", Layout {size: size_of::<OsinfoImageListClass>(), alignment: align_of::<OsinfoImageListClass>()}),
    ("OsinfoInstallConfig", Layout {size: size_of::<OsinfoInstallConfig>(), alignment: align_of::<OsinfoInstallConfig>()}),
    ("OsinfoInstallConfigClass", Layout {size: size_of::<OsinfoInstallConfigClass>(), alignment: align_of::<OsinfoInstallConfigClass>()}),
    ("OsinfoInstallConfigParam", Layout {size: size_of::<OsinfoInstallConfigParam>(), alignment: align_of::<OsinfoInstallConfigParam>()}),
    ("OsinfoInstallConfigParamClass", Layout {size: size_of::<OsinfoInstallConfigParamClass>(), alignment: align_of::<OsinfoInstallConfigParamClass>()}),
    ("OsinfoInstallConfigParamList", Layout {size: size_of::<OsinfoInstallConfigParamList>(), alignment: align_of::<OsinfoInstallConfigParamList>()}),
    ("OsinfoInstallConfigParamListClass", Layout {size: size_of::<OsinfoInstallConfigParamListClass>(), alignment: align_of::<OsinfoInstallConfigParamListClass>()}),
    ("OsinfoInstallConfigParamPolicy", Layout {size: size_of::<OsinfoInstallConfigParamPolicy>(), alignment: align_of::<OsinfoInstallConfigParamPolicy>()}),
    ("OsinfoInstallScript", Layout {size: size_of::<OsinfoInstallScript>(), alignment: align_of::<OsinfoInstallScript>()}),
    ("OsinfoInstallScriptClass", Layout {size: size_of::<OsinfoInstallScriptClass>(), alignment: align_of::<OsinfoInstallScriptClass>()}),
    ("OsinfoInstallScriptInjectionMethod", Layout {size: size_of::<OsinfoInstallScriptInjectionMethod>(), alignment: align_of::<OsinfoInstallScriptInjectionMethod>()}),
    ("OsinfoInstallScriptInstallationSource", Layout {size: size_of::<OsinfoInstallScriptInstallationSource>(), alignment: align_of::<OsinfoInstallScriptInstallationSource>()}),
    ("OsinfoInstallScriptList", Layout {size: size_of::<OsinfoInstallScriptList>(), alignment: align_of::<OsinfoInstallScriptList>()}),
    ("OsinfoInstallScriptListClass", Layout {size: size_of::<OsinfoInstallScriptListClass>(), alignment: align_of::<OsinfoInstallScriptListClass>()}),
    ("OsinfoList", Layout {size: size_of::<OsinfoList>(), alignment: align_of::<OsinfoList>()}),
    ("OsinfoListClass", Layout {size: size_of::<OsinfoListClass>(), alignment: align_of::<OsinfoListClass>()}),
    ("OsinfoLoader", Layout {size: size_of::<OsinfoLoader>(), alignment: align_of::<OsinfoLoader>()}),
    ("OsinfoLoaderClass", Layout {size: size_of::<OsinfoLoaderClass>(), alignment: align_of::<OsinfoLoaderClass>()}),
    ("OsinfoMedia", Layout {size: size_of::<OsinfoMedia>(), alignment: align_of::<OsinfoMedia>()}),
    ("OsinfoMediaClass", Layout {size: size_of::<OsinfoMediaClass>(), alignment: align_of::<OsinfoMediaClass>()}),
    ("OsinfoMediaDetectFlags", Layout {size: size_of::<OsinfoMediaDetectFlags>(), alignment: align_of::<OsinfoMediaDetectFlags>()}),
    ("OsinfoMediaError", Layout {size: size_of::<OsinfoMediaError>(), alignment: align_of::<OsinfoMediaError>()}),
    ("OsinfoMediaList", Layout {size: size_of::<OsinfoMediaList>(), alignment: align_of::<OsinfoMediaList>()}),
    ("OsinfoMediaListClass", Layout {size: size_of::<OsinfoMediaListClass>(), alignment: align_of::<OsinfoMediaListClass>()}),
    ("OsinfoOs", Layout {size: size_of::<OsinfoOs>(), alignment: align_of::<OsinfoOs>()}),
    ("OsinfoOsClass", Layout {size: size_of::<OsinfoOsClass>(), alignment: align_of::<OsinfoOsClass>()}),
    ("OsinfoOsList", Layout {size: size_of::<OsinfoOsList>(), alignment: align_of::<OsinfoOsList>()}),
    ("OsinfoOsListClass", Layout {size: size_of::<OsinfoOsListClass>(), alignment: align_of::<OsinfoOsListClass>()}),
    ("OsinfoOsVariant", Layout {size: size_of::<OsinfoOsVariant>(), alignment: align_of::<OsinfoOsVariant>()}),
    ("OsinfoOsVariantClass", Layout {size: size_of::<OsinfoOsVariantClass>(), alignment: align_of::<OsinfoOsVariantClass>()}),
    ("OsinfoOsVariantList", Layout {size: size_of::<OsinfoOsVariantList>(), alignment: align_of::<OsinfoOsVariantList>()}),
    ("OsinfoOsVariantListClass", Layout {size: size_of::<OsinfoOsVariantListClass>(), alignment: align_of::<OsinfoOsVariantListClass>()}),
    ("OsinfoPathFormat", Layout {size: size_of::<OsinfoPathFormat>(), alignment: align_of::<OsinfoPathFormat>()}),
    ("OsinfoPlatform", Layout {size: size_of::<OsinfoPlatform>(), alignment: align_of::<OsinfoPlatform>()}),
    ("OsinfoPlatformClass", Layout {size: size_of::<OsinfoPlatformClass>(), alignment: align_of::<OsinfoPlatformClass>()}),
    ("OsinfoPlatformList", Layout {size: size_of::<OsinfoPlatformList>(), alignment: align_of::<OsinfoPlatformList>()}),
    ("OsinfoPlatformListClass", Layout {size: size_of::<OsinfoPlatformListClass>(), alignment: align_of::<OsinfoPlatformListClass>()}),
    ("OsinfoProduct", Layout {size: size_of::<OsinfoProduct>(), alignment: align_of::<OsinfoProduct>()}),
    ("OsinfoProductClass", Layout {size: size_of::<OsinfoProductClass>(), alignment: align_of::<OsinfoProductClass>()}),
    ("OsinfoProductFilter", Layout {size: size_of::<OsinfoProductFilter>(), alignment: align_of::<OsinfoProductFilter>()}),
    ("OsinfoProductFilterClass", Layout {size: size_of::<OsinfoProductFilterClass>(), alignment: align_of::<OsinfoProductFilterClass>()}),
    ("OsinfoProductList", Layout {size: size_of::<OsinfoProductList>(), alignment: align_of::<OsinfoProductList>()}),
    ("OsinfoProductListClass", Layout {size: size_of::<OsinfoProductListClass>(), alignment: align_of::<OsinfoProductListClass>()}),
    ("OsinfoProductRelationship", Layout {size: size_of::<OsinfoProductRelationship>(), alignment: align_of::<OsinfoProductRelationship>()}),
    ("OsinfoReleaseStatus", Layout {size: size_of::<OsinfoReleaseStatus>(), alignment: align_of::<OsinfoReleaseStatus>()}),
    ("OsinfoResources", Layout {size: size_of::<OsinfoResources>(), alignment: align_of::<OsinfoResources>()}),
    ("OsinfoResourcesClass", Layout {size: size_of::<OsinfoResourcesClass>(), alignment: align_of::<OsinfoResourcesClass>()}),
    ("OsinfoResourcesList", Layout {size: size_of::<OsinfoResourcesList>(), alignment: align_of::<OsinfoResourcesList>()}),
    ("OsinfoResourcesListClass", Layout {size: size_of::<OsinfoResourcesListClass>(), alignment: align_of::<OsinfoResourcesListClass>()}),
    ("OsinfoTree", Layout {size: size_of::<OsinfoTree>(), alignment: align_of::<OsinfoTree>()}),
    ("OsinfoTreeClass", Layout {size: size_of::<OsinfoTreeClass>(), alignment: align_of::<OsinfoTreeClass>()}),
    ("OsinfoTreeError", Layout {size: size_of::<OsinfoTreeError>(), alignment: align_of::<OsinfoTreeError>()}),
    ("OsinfoTreeList", Layout {size: size_of::<OsinfoTreeList>(), alignment: align_of::<OsinfoTreeList>()}),
    ("OsinfoTreeListClass", Layout {size: size_of::<OsinfoTreeListClass>(), alignment: align_of::<OsinfoTreeListClass>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("OSINFO_ARCHITECTURE_ALL", "all"),
    ("OSINFO_AVATAR_FORMAT_PROP_ALPHA", "alpha"),
    ("OSINFO_AVATAR_FORMAT_PROP_HEIGHT", "height"),
    ("OSINFO_AVATAR_FORMAT_PROP_MIME_TYPE", "mime-type"),
    ("OSINFO_AVATAR_FORMAT_PROP_WIDTH", "width"),
    ("OSINFO_DEVICELINK_PROP_DRIVER", "driver"),
    ("OSINFO_DEVICELINK_PROP_SUPPORTED", "supported"),
    ("OSINFO_DEVICE_DRIVER_DEFAULT_PRIORITY", "50"),
    ("OSINFO_DEVICE_DRIVER_PROP_ARCHITECTURE", "arch"),
    ("OSINFO_DEVICE_DRIVER_PROP_DEVICE", "device"),
    ("OSINFO_DEVICE_DRIVER_PROP_FILE", "file"),
    ("OSINFO_DEVICE_DRIVER_PROP_LOCATION", "location"),
    ("OSINFO_DEVICE_DRIVER_PROP_PRE_INSTALLABLE", "pre-installable"),
    ("OSINFO_DEVICE_DRIVER_PROP_PRIORITY", "priority"),
    ("OSINFO_DEVICE_DRIVER_PROP_SIGNED", "signed"),
    ("(gint) OSINFO_DEVICE_DRIVER_SIGNING_REQ_NONE", "0"),
    ("(gint) OSINFO_DEVICE_DRIVER_SIGNING_REQ_STRICT", "1"),
    ("(gint) OSINFO_DEVICE_DRIVER_SIGNING_REQ_WARN", "2"),
    ("OSINFO_DEVICE_PROP_BUS_TYPE", "bus-type"),
    ("OSINFO_DEVICE_PROP_CLASS", "class"),
    ("OSINFO_DEVICE_PROP_NAME", "name"),
    ("OSINFO_DEVICE_PROP_PRODUCT", "product"),
    ("OSINFO_DEVICE_PROP_PRODUCT_ID", "product-id"),
    ("OSINFO_DEVICE_PROP_SUBSYSTEM", "subsystem"),
    ("OSINFO_DEVICE_PROP_VENDOR", "vendor"),
    ("OSINFO_DEVICE_PROP_VENDOR_ID", "vendor-id"),
    ("OSINFO_ENTITY_PROP_ID", "id"),
    ("(gint) OSINFO_ERROR_GENERIC", "0"),
    ("OSINFO_FIRMWARE_PROP_ARCHITECTURE", "architecture"),
    ("OSINFO_FIRMWARE_PROP_SUPPORTED", "supported"),
    ("OSINFO_FIRMWARE_PROP_TYPE", "type"),
    ("OSINFO_GIBIBYTES", "1073741824"),
    ("OSINFO_IMAGE_PROP_ARCHITECTURE", "architecture"),
    ("OSINFO_IMAGE_PROP_CLOUD_INIT", "cloud-init"),
    ("OSINFO_IMAGE_PROP_FORMAT", "format"),
    ("OSINFO_IMAGE_PROP_URL", "url"),
    ("OSINFO_IMAGE_PROP_VARIANT", "variant"),
    ("(gint) OSINFO_INSTALL_CONFIG_PARAM_POLICY_NONE", "0"),
    ("(gint) OSINFO_INSTALL_CONFIG_PARAM_POLICY_OPTIONAL", "2"),
    ("(gint) OSINFO_INSTALL_CONFIG_PARAM_POLICY_REQUIRED", "1"),
    ("OSINFO_INSTALL_CONFIG_PARAM_PROP_DATAMAP", "value-map"),
    ("OSINFO_INSTALL_CONFIG_PARAM_PROP_NAME", "name"),
    ("OSINFO_INSTALL_CONFIG_PARAM_PROP_POLICY", "policy"),
    ("OSINFO_INSTALL_CONFIG_PROP_ADMIN_PASSWORD", "admin-password"),
    ("OSINFO_INSTALL_CONFIG_PROP_AVATAR_DISK", "avatar-disk"),
    ("OSINFO_INSTALL_CONFIG_PROP_AVATAR_LOCATION", "avatar-location"),
    ("OSINFO_INSTALL_CONFIG_PROP_DRIVER_SIGNING", "driver-signing"),
    ("OSINFO_INSTALL_CONFIG_PROP_HARDWARE_ARCH", "hardware-arch"),
    ("OSINFO_INSTALL_CONFIG_PROP_HOSTNAME", "hostname"),
    ("OSINFO_INSTALL_CONFIG_PROP_INSTALLATION_URL", "installation-url"),
    ("OSINFO_INSTALL_CONFIG_PROP_L10N_KEYBOARD", "l10n-keyboard"),
    ("OSINFO_INSTALL_CONFIG_PROP_L10N_LANGUAGE", "l10n-language"),
    ("OSINFO_INSTALL_CONFIG_PROP_L10N_TIMEZONE", "l10n-timezone"),
    ("OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_DISK", "post-install-drivers-disk"),
    ("OSINFO_INSTALL_CONFIG_PROP_POST_INSTALL_DRIVERS_LOCATION", "post-install-drivers-location"),
    ("OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_DISK", "pre-install-drivers-disk"),
    ("OSINFO_INSTALL_CONFIG_PROP_PRE_INSTALL_DRIVERS_LOCATION", "pre-install-drivers-location"),
    ("OSINFO_INSTALL_CONFIG_PROP_REG_LOGIN", "reg-login"),
    ("OSINFO_INSTALL_CONFIG_PROP_REG_PASSWORD", "reg-password"),
    ("OSINFO_INSTALL_CONFIG_PROP_REG_PRODUCTKEY", "reg-product-key"),
    ("OSINFO_INSTALL_CONFIG_PROP_SCRIPT_DISK", "script-disk"),
    ("OSINFO_INSTALL_CONFIG_PROP_TARGET_DISK", "target-disk"),
    ("OSINFO_INSTALL_CONFIG_PROP_USER_ADMIN", "user-admin"),
    ("OSINFO_INSTALL_CONFIG_PROP_USER_AUTOLOGIN", "user-autologin"),
    ("OSINFO_INSTALL_CONFIG_PROP_USER_LOGIN", "user-login"),
    ("OSINFO_INSTALL_CONFIG_PROP_USER_PASSWORD", "user-password"),
    ("OSINFO_INSTALL_CONFIG_PROP_USER_REALNAME", "user-realname"),
    ("(guint) OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_CDROM", "1"),
    ("(guint) OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK", "2"),
    ("(guint) OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_FLOPPY", "4"),
    ("(guint) OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD", "8"),
    ("(guint) OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_WEB", "16"),
    ("(gint) OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_MEDIA", "0"),
    ("(gint) OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_NETWORK", "1"),
    ("OSINFO_INSTALL_SCRIPT_PROFILE_DESKTOP", "desktop"),
    ("OSINFO_INSTALL_SCRIPT_PROFILE_JEOS", "jeos"),
    ("OSINFO_INSTALL_SCRIPT_PROP_CAN_POST_INSTALL_DRIVERS", "can-post-install-drivers"),
    ("OSINFO_INSTALL_SCRIPT_PROP_CAN_PRE_INSTALL_DRIVERS", "can-pre-install-drivers"),
    ("OSINFO_INSTALL_SCRIPT_PROP_EXPECTED_FILENAME", "expected-filename"),
    ("OSINFO_INSTALL_SCRIPT_PROP_INJECTION_METHOD", "injection-method"),
    ("OSINFO_INSTALL_SCRIPT_PROP_INSTALLATION_SOURCE", "installation-source"),
    ("OSINFO_INSTALL_SCRIPT_PROP_NEEDS_INTERNET", "needs-internet"),
    ("OSINFO_INSTALL_SCRIPT_PROP_PATH_FORMAT", "path-format"),
    ("OSINFO_INSTALL_SCRIPT_PROP_POST_INSTALL_DRIVERS_SIGNING_REQ", "post-install-drivers-signing-req"),
    ("OSINFO_INSTALL_SCRIPT_PROP_PREFERRED_INJECTION_METHOD", "preferred-injection-method"),
    ("OSINFO_INSTALL_SCRIPT_PROP_PRE_INSTALL_DRIVERS_SIGNING_REQ", "pre-install-drivers-signing-req"),
    ("OSINFO_INSTALL_SCRIPT_PROP_PRODUCT_KEY_FORMAT", "product-key-format"),
    ("OSINFO_INSTALL_SCRIPT_PROP_PROFILE", "profile"),
    ("OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_DATA", "template-data"),
    ("OSINFO_INSTALL_SCRIPT_PROP_TEMPLATE_URI", "template-uri"),
    ("OSINFO_KIBIBYTES", "1024"),
    ("OSINFO_MAJOR_VERSION", "1"),
    ("OSINFO_MEBIBYTES", "1048576"),
    ("(guint) OSINFO_MEDIA_DETECT_REQUIRE_BOOTABLE", "1"),
    ("(gint) OSINFO_MEDIA_ERROR_INSUFFICIENT_METADATA", "3"),
    ("(gint) OSINFO_MEDIA_ERROR_NOT_BOOTABLE", "4"),
    ("(gint) OSINFO_MEDIA_ERROR_NO_DESCRIPTORS", "0"),
    ("(gint) OSINFO_MEDIA_ERROR_NO_DIRECTORY_RECORD_EXTENT", "5"),
    ("(gint) OSINFO_MEDIA_ERROR_NO_PVD", "1"),
    ("(gint) OSINFO_MEDIA_ERROR_NO_SVD", "2"),
    ("OSINFO_MEDIA_PROP_APPLICATION_ID", "application-id"),
    ("OSINFO_MEDIA_PROP_ARCHITECTURE", "architecture"),
    ("OSINFO_MEDIA_PROP_BOOTABLE", "bootable"),
    ("OSINFO_MEDIA_PROP_EJECT_AFTER_INSTALL", "eject-after-install"),
    ("OSINFO_MEDIA_PROP_INITRD", "initrd"),
    ("OSINFO_MEDIA_PROP_INSTALLER", "installer"),
    ("OSINFO_MEDIA_PROP_INSTALLER_REBOOTS", "installer-reboots"),
    ("OSINFO_MEDIA_PROP_INSTALLER_SCRIPT", "installer-script"),
    ("OSINFO_MEDIA_PROP_KERNEL", "kernel"),
    ("OSINFO_MEDIA_PROP_LANG", "l10n-language"),
    ("OSINFO_MEDIA_PROP_LANG_MAP", "l10n-language-map"),
    ("OSINFO_MEDIA_PROP_LANG_REGEX", "l10n-language-regex"),
    ("OSINFO_MEDIA_PROP_LIVE", "live"),
    ("OSINFO_MEDIA_PROP_PUBLISHER_ID", "publisher-id"),
    ("OSINFO_MEDIA_PROP_SYSTEM_ID", "system-id"),
    ("OSINFO_MEDIA_PROP_URL", "url"),
    ("OSINFO_MEDIA_PROP_VARIANT", "variant"),
    ("OSINFO_MEDIA_PROP_VOLUME_ID", "volume-id"),
    ("OSINFO_MEDIA_PROP_VOLUME_SIZE", "volume-size"),
    ("OSINFO_MEGAHERTZ", "1000000"),
    ("OSINFO_MICRO_VERSION", "0"),
    ("OSINFO_MINOR_VERSION", "12"),
    ("OSINFO_OS_PROP_CLOUD_IMAGE_USERNAME", "cloud-image-username"),
    ("OSINFO_OS_PROP_DISTRO", "distro"),
    ("OSINFO_OS_PROP_FAMILY", "family"),
    ("OSINFO_OS_PROP_KERNEL_URL_ARGUMENT", "kernel-url-argument"),
    ("OSINFO_OS_PROP_RELEASE_STATUS", "release-status"),
    ("OSINFO_OS_VARIANT_PROP_NAME", "name"),
    ("(gint) OSINFO_PATH_FORMAT_DOS", "1"),
    ("(gint) OSINFO_PATH_FORMAT_UNIX", "0"),
    ("OSINFO_PRODUCT_PROP_CODENAME", "codename"),
    ("OSINFO_PRODUCT_PROP_EOL_DATE", "eol-date"),
    ("OSINFO_PRODUCT_PROP_LOGO", "logo"),
    ("OSINFO_PRODUCT_PROP_NAME", "name"),
    ("OSINFO_PRODUCT_PROP_RELEASE_DATE", "release-date"),
    ("OSINFO_PRODUCT_PROP_SHORT_ID", "short-id"),
    ("OSINFO_PRODUCT_PROP_VENDOR", "vendor"),
    ("OSINFO_PRODUCT_PROP_VERSION", "version"),
    ("(gint) OSINFO_PRODUCT_RELATIONSHIP_CLONES", "2"),
    ("(gint) OSINFO_PRODUCT_RELATIONSHIP_DERIVES_FROM", "0"),
    ("(gint) OSINFO_PRODUCT_RELATIONSHIP_UPGRADES", "1"),
    ("(gint) OSINFO_RELEASE_STATUS_PRERELEASE", "2"),
    ("(gint) OSINFO_RELEASE_STATUS_RELEASED", "0"),
    ("(gint) OSINFO_RELEASE_STATUS_ROLLING", "3"),
    ("(gint) OSINFO_RELEASE_STATUS_SNAPSHOT", "1"),
    ("OSINFO_RESOURCES_PROP_ARCHITECTURE", "architecture"),
    ("OSINFO_RESOURCES_PROP_CPU", "cpu"),
    ("OSINFO_RESOURCES_PROP_N_CPUS", "n-cpus"),
    ("OSINFO_RESOURCES_PROP_RAM", "ram"),
    ("OSINFO_RESOURCES_PROP_STORAGE", "storage"),
    ("(gint) OSINFO_TREE_ERROR_NOT_SUPPORTED_PROTOCOL", "1"),
    ("(gint) OSINFO_TREE_ERROR_NO_TREEINFO", "0"),
    ("OSINFO_TREE_PROP_ARCHITECTURE", "architecture"),
    ("OSINFO_TREE_PROP_BOOT_ISO", "boot-iso"),
    ("OSINFO_TREE_PROP_HAS_TREEINFO", "has-treeinfo"),
    ("OSINFO_TREE_PROP_INITRD", "initrd"),
    ("OSINFO_TREE_PROP_KERNEL", "kernel"),
    ("OSINFO_TREE_PROP_TREEINFO_ARCH", "treeinfo-arch"),
    ("OSINFO_TREE_PROP_TREEINFO_FAMILY", "treeinfo-family"),
    ("OSINFO_TREE_PROP_TREEINFO_VARIANT", "treeinfo-variant"),
    ("OSINFO_TREE_PROP_TREEINFO_VERSION", "treeinfo-version"),
    ("OSINFO_TREE_PROP_URL", "url"),
    ("OSINFO_TREE_PROP_VARIANT", "variant"),
];


