// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Device,Entity};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `target`
    ///  The target of the device link.
    ///
    /// Readable | Writeable | Construct Only
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`DeviceLinkExt`][trait@crate::prelude::DeviceLinkExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoDeviceLink")]
    pub struct DeviceLink(Object<ffi::OsinfoDeviceLink, ffi::OsinfoDeviceLinkClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_devicelink_get_type(),
    }
}

impl DeviceLink {
        pub const NONE: Option<&'static DeviceLink> = None;
    

    /// Construct a new link for an [`Device`][crate::Device]. The unique ID
    /// of the link is set to match the ID of the target device.
    /// ## `target`
    /// the target device
    ///
    /// # Returns
    ///
    /// the new device link
    #[doc(alias = "osinfo_devicelink_new")]
    pub fn new(target: &impl IsA<Device>) -> DeviceLink {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::osinfo_devicelink_new(target.as_ref().to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`DeviceLink`] objects.
            ///
            /// This method returns an instance of [`DeviceLinkBuilder`](crate::builders::DeviceLinkBuilder) which can be used to create [`DeviceLink`] objects.
            pub fn builder() -> DeviceLinkBuilder {
                DeviceLinkBuilder::new()
            }
        
}

impl Default for DeviceLink {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`DeviceLink`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeviceLinkBuilder {
            builder: glib::object::ObjectBuilder<'static, DeviceLink>,
        }

        impl DeviceLinkBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The target of the device link.
                            pub fn target(self, target: &impl IsA<Device>) -> Self {
                            Self { builder: self.builder.property("target", target.clone().upcast()), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`DeviceLink`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> DeviceLink {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@DeviceLink`] methods.
///
/// # Implementors
///
/// [`DeviceLink`][struct@crate::DeviceLink]
pub trait DeviceLinkExt: IsA<DeviceLink> + 'static {
    #[doc(alias = "osinfo_devicelink_get_driver")]
    #[doc(alias = "get_driver")]
    fn driver(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_devicelink_get_driver(self.as_ref().to_glib_none().0))
        }
    }

    /// Retrieve the [`Device`][crate::Device] that the link points to.
    ///
    /// # Returns
    ///
    /// the target of the device link
    #[doc(alias = "osinfo_devicelink_get_target")]
    #[doc(alias = "get_target")]
    fn target(&self) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::osinfo_devicelink_get_target(self.as_ref().to_glib_none().0))
        }
    }
}

impl<O: IsA<DeviceLink>> DeviceLinkExt for O {}
