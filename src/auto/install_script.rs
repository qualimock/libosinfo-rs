// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,AvatarFormat,DeviceDriverSigningReq,Entity,InstallConfig,InstallConfigParam,InstallConfigParamList,InstallScriptInjectionMethod,InstallScriptInstallationSource,Media,Os,PathFormat};
#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
use crate::{Tree};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,pin::Pin};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `avatar-format`
    ///  Readable
    ///
    ///
    /// #### `installation-source`
    ///  Readable
    ///
    ///
    /// #### `path-format`
    ///  Readable
    ///
    ///
    /// #### `preferred-injection-method`
    ///  Readable | Writeable
    ///
    ///
    /// #### `product-key-format`
    ///  Readable
    ///
    ///
    /// #### `profile`
    ///  Readable | Writeable | Construct Only
    ///
    ///
    /// #### `template-data`
    ///  Readable | Writeable | Construct Only
    ///
    ///
    /// #### `template-uri`
    ///  Readable | Writeable | Construct Only
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`InstallScriptExt`][trait@crate::prelude::InstallScriptExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoInstallScript")]
    pub struct InstallScript(Object<ffi::OsinfoInstallScript, ffi::OsinfoInstallScriptClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_install_script_get_type(),
    }
}

impl InstallScript {
        pub const NONE: Option<&'static InstallScript> = None;
    

    #[doc(alias = "osinfo_install_script_new")]
    pub fn new(id: &str) -> InstallScript {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_install_script_new(id.to_glib_none().0))
        }
    }

    /// Construct a new install script from stylesheet data
    /// ## `id`
    /// a unique identifier
    /// ## `profile`
    /// the profile of script
    /// ## `template_data`
    /// style sheet data
    ///
    /// # Returns
    ///
    /// an new install script
    #[doc(alias = "osinfo_install_script_new_data")]
    pub fn new_data(id: &str, profile: &str, template_data: &str) -> InstallScript {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_install_script_new_data(id.to_glib_none().0, profile.to_glib_none().0, template_data.to_glib_none().0))
        }
    }

    /// Construct a new install script from a stylesheet URI
    /// ## `id`
    /// a unique identifier
    /// ## `profile`
    /// the profile of script
    /// ## `template_uri`
    /// style sheet URI
    ///
    /// # Returns
    ///
    /// an new install script
    #[doc(alias = "osinfo_install_script_new_uri")]
    pub fn new_uri(id: &str, profile: &str, template_uri: &str) -> InstallScript {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_install_script_new_uri(id.to_glib_none().0, profile.to_glib_none().0, template_uri.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`InstallScript`] objects.
            ///
            /// This method returns an instance of [`InstallScriptBuilder`](crate::builders::InstallScriptBuilder) which can be used to create [`InstallScript`] objects.
            pub fn builder() -> InstallScriptBuilder {
                InstallScriptBuilder::new()
            }
        
}

impl Default for InstallScript {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`InstallScript`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct InstallScriptBuilder {
            builder: glib::object::ObjectBuilder<'static, InstallScript>,
        }

        impl InstallScriptBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn preferred_injection_method(self, preferred_injection_method: InstallScriptInjectionMethod) -> Self {
                            Self { builder: self.builder.property("preferred-injection-method", preferred_injection_method), }
                        }

                            pub fn profile(self, profile: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("profile", profile.into()), }
                        }

                            pub fn template_data(self, template_data: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("template-data", template_data.into()), }
                        }

                            pub fn template_uri(self, template_uri: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("template-uri", template_uri.into()), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`InstallScript`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> InstallScript {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@InstallScript`] methods.
///
/// # Implementors
///
/// [`InstallScript`][struct@crate::InstallScript]
pub trait InstallScriptExt: IsA<InstallScript> + 'static {
    /// Creates an install script.
    /// ## `os`
    /// the os
    /// ## `config`
    /// the install script config
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    ///
    /// # Returns
    ///
    /// the script as string.
    ///
    /// If you are generating the script for a specific media, it is recommended
    /// that you use [`generate_for_media()`][Self::generate_for_media()] instead.
    ///
    /// If you are generating the script for a specific tree, it is recommended
    /// that you use [`generate_for_tree()`][Self::generate_for_tree()] in instead.
    #[doc(alias = "osinfo_install_script_generate")]
    fn generate(&self, os: &impl IsA<Os>, config: &impl IsA<InstallConfig>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronous variant of [`generate()`][Self::generate()]. From the callback,
    /// call `osinfo_install_script_generate_finish()` to conclude this call and get
    /// the generated script.
    ///
    /// If you are generating the script for a specific media, it is recommended that
    /// you use [`generate_for_media_async()`][Self::generate_for_media_async()] instead.
    /// ## `os`
    /// the os
    /// ## `config`
    /// the install script config
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    /// ## `callback`
    /// Function to call when result of this call is ready
    #[doc(alias = "osinfo_install_script_generate_async")]
    fn generate_async<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(&self, os: &impl IsA<Os>, config: &impl IsA<InstallConfig>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn generate_async_trampoline<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) { unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }}
        let callback = generate_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_install_script_generate_async(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn generate_future(&self, os: &(impl IsA<Os> + Clone + 'static), config: &(impl IsA<InstallConfig> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, glib::Error>> + 'static>> {

        let os = os.clone();
        let config = config.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.generate_async(
                &os,
                &config,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    /// Some install scripts need to pass a command line to the kernel, Such install
    /// scripts belong to OSs that provide paths to the kernel and initrd files that
    /// can be used to directly boot
    /// (http://wiki.qemu.org/download/qemu-doc.html`direct_005flinux_005fboot`)
    /// the OS in order to pass the needed commandline to it.
    ///
    /// If you are generating the command line for a specific media, it is
    /// recommended that you use
    /// [`generate_command_line_for_media()`][Self::generate_command_line_for_media()] instead.
    ///
    /// If you are generating the command line for a specific tree, it is
    /// recommended that you use
    /// [`generate_command_line_for_tree()`][Self::generate_command_line_for_tree()] instead.
    /// ## `os`
    /// the os entity
    /// ## `config`
    /// the install script config
    ///
    /// # Returns
    ///
    /// The generated command line string, NULL otherwise.
    #[doc(alias = "osinfo_install_script_generate_command_line")]
    fn generate_command_line(&self, os: &impl IsA<Os>, config: &impl IsA<InstallConfig>) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::osinfo_install_script_generate_command_line(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0))
        }
    }

    /// Some install scripts need to pass a command line to the kernel, Such install
    /// scripts belong to OSs that provide paths to the kernel and initrd files that
    /// can be used to directly boot
    /// (http://wiki.qemu.org/download/qemu-doc.html`direct_005flinux_005fboot`)
    /// the OS in order to pass the needed commandline to it.
    ///
    /// The media `media` must have been identified successfully using
    /// [`DbExt::identify_media()`][crate::prelude::DbExt::identify_media()] before calling this function.
    /// ## `media`
    /// the media
    /// ## `config`
    /// the install script config
    ///
    /// # Returns
    ///
    /// The generated command line string, NULL otherwise.
    #[doc(alias = "osinfo_install_script_generate_command_line_for_media")]
    fn generate_command_line_for_media(&self, media: &impl IsA<Media>, config: &impl IsA<InstallConfig>) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::osinfo_install_script_generate_command_line_for_media(self.as_ref().to_glib_none().0, media.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0))
        }
    }

    /// Some install scripts need to pass a command line to the kernel, Such install
    /// scripts belong to OSs that provide paths to the kernel and initrd files that
    /// can be used to directly boot
    /// (http://wiki.qemu.org/download/qemu-doc.html`direct_005flinux_005fboot`)
    /// the OS in order to pass the needed commandline to it.
    ///
    /// The tree `tree` must have been identified successfully using
    /// [`DbExt::identify_tree()`][crate::prelude::DbExt::identify_tree()] before calling this function.
    /// ## `tree`
    /// the tree
    /// ## `config`
    /// the install script config
    ///
    /// # Returns
    ///
    /// The generated command line string, NULL otherwise.
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_install_script_generate_command_line_for_tree")]
    fn generate_command_line_for_tree(&self, tree: &impl IsA<Tree>, config: &impl IsA<InstallConfig>) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::osinfo_install_script_generate_command_line_for_tree(self.as_ref().to_glib_none().0, tree.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0))
        }
    }

    /// Creates an install script. The media `media` must have been identified
    /// successfully using [`DbExt::identify_media()`][crate::prelude::DbExt::identify_media()] before calling this function.
    /// ## `media`
    /// the media
    /// ## `config`
    /// the install script config
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    ///
    /// # Returns
    ///
    /// the script as string.
    #[doc(alias = "osinfo_install_script_generate_for_media")]
    fn generate_for_media(&self, media: &impl IsA<Media>, config: &impl IsA<InstallConfig>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_for_media(self.as_ref().to_glib_none().0, media.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronous variant of [`generate_for_media()`][Self::generate_for_media()]. From the
    /// callback, call `osinfo_install_script_generate_for_media_finish()` to
    /// conclude this call and get the generated script.
    /// ## `media`
    /// the media
    /// ## `config`
    /// the install script config
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    /// ## `callback`
    /// Function to call when result of this call is ready
    #[doc(alias = "osinfo_install_script_generate_for_media_async")]
    fn generate_for_media_async<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(&self, media: &impl IsA<Media>, config: &impl IsA<InstallConfig>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn generate_for_media_async_trampoline<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) { unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_for_media_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }}
        let callback = generate_for_media_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_install_script_generate_for_media_async(self.as_ref().to_glib_none().0, media.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn generate_for_media_future(&self, media: &(impl IsA<Media> + Clone + 'static), config: &(impl IsA<InstallConfig> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, glib::Error>> + 'static>> {

        let media = media.clone();
        let config = config.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.generate_for_media_async(
                &media,
                &config,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    /// Creates an install script. The tree `tree` must have been identified
    /// successfully using [`DbExt::identify_tree()`][crate::prelude::DbExt::identify_tree()] before calling this function.
    /// ## `tree`
    /// the tree
    /// ## `config`
    /// the install script config
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    ///
    /// # Returns
    ///
    /// the script as string.
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_install_script_generate_for_tree")]
    fn generate_for_tree(&self, tree: &impl IsA<Tree>, config: &impl IsA<InstallConfig>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_for_tree(self.as_ref().to_glib_none().0, tree.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronous variant of [`generate_for_tree()`][Self::generate_for_tree()]. From the
    /// callback, call `osinfo_install_script_generate_for_tree_finish()` to
    /// conclude this call and get the generated script.
    /// ## `tree`
    /// the tree
    /// ## `config`
    /// the install script config
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    /// ## `callback`
    /// Function to call when result of this call is ready
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_install_script_generate_for_tree_async")]
    fn generate_for_tree_async<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(&self, tree: &impl IsA<Tree>, config: &impl IsA<InstallConfig>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn generate_for_tree_async_trampoline<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) { unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_for_tree_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }}
        let callback = generate_for_tree_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_install_script_generate_for_tree_async(self.as_ref().to_glib_none().0, tree.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    fn generate_for_tree_future(&self, tree: &(impl IsA<Tree> + Clone + 'static), config: &(impl IsA<InstallConfig> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, glib::Error>> + 'static>> {

        let tree = tree.clone();
        let config = config.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.generate_for_tree_async(
                &tree,
                &config,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    /// Creates an install script that is written to the returned file.
    /// ## `os`
    /// the os entity
    /// ## `config`
    /// the install script config
    /// ## `output_dir`
    /// the directory where the file containing the output script
    ///  will be written
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    ///
    /// # Returns
    ///
    /// a file containing the script
    ///
    /// If you are generating the script for a specific media, it is recommended
    /// that you use [`generate_output_for_media()`][Self::generate_output_for_media()] instead.
    ///
    /// If you are generating the script for a specific tree, it is recommended
    /// that you use [`generate_output_for_tree()`][Self::generate_output_for_tree()] instead.
    #[doc(alias = "osinfo_install_script_generate_output")]
    fn generate_output(&self, os: &impl IsA<Os>, config: &impl IsA<InstallConfig>, output_dir: &impl IsA<gio::File>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<gio::File, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_output(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, output_dir.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronous variant of [`generate_output()`][Self::generate_output()]. From the
    /// callback, call `osinfo_install_script_generate_output_finish()` to conclude
    /// this call and get the generated script.
    ///
    /// If you are generating the script for a specific media, it is recommended that
    /// you use [`generate_output_for_media_async()`][Self::generate_output_for_media_async()] instead.
    /// ## `os`
    /// the os
    /// ## `config`
    /// the install script config
    /// ## `output_dir`
    /// the directory where the file containing the output script
    ///  will be written
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    /// ## `callback`
    /// Function to call when result of this call is ready
    #[doc(alias = "osinfo_install_script_generate_output_async")]
    fn generate_output_async<P: FnOnce(Result<gio::File, glib::Error>) + 'static>(&self, os: &impl IsA<Os>, config: &impl IsA<InstallConfig>, output_dir: &impl IsA<gio::File>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn generate_output_async_trampoline<P: FnOnce(Result<gio::File, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) { unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_output_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }}
        let callback = generate_output_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_install_script_generate_output_async(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, output_dir.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn generate_output_future(&self, os: &(impl IsA<Os> + Clone + 'static), config: &(impl IsA<InstallConfig> + Clone + 'static), output_dir: &(impl IsA<gio::File> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::File, glib::Error>> + 'static>> {

        let os = os.clone();
        let config = config.clone();
        let output_dir = output_dir.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.generate_output_async(
                &os,
                &config,
                &output_dir,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    /// Creates an install script that is written to the returned file.
    /// ## `media`
    /// the media
    /// ## `config`
    /// the install script config
    /// ## `output_dir`
    /// the directory where the file containing the output script
    ///  will be written
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    ///
    /// # Returns
    ///
    /// a file containing the script.
    #[doc(alias = "osinfo_install_script_generate_output_for_media")]
    fn generate_output_for_media(&self, media: &impl IsA<Media>, config: &impl IsA<InstallConfig>, output_dir: &impl IsA<gio::File>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<gio::File, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_output_for_media(self.as_ref().to_glib_none().0, media.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, output_dir.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronous variant of [`generate_output_for_media()`][Self::generate_output_for_media()].
    /// From the callback, call
    /// `osinfo_install_script_generate_output_for_media_finish()` to conclude this
    /// call and get the generated file.
    /// ## `media`
    /// the media
    /// ## `config`
    /// the install script config
    /// ## `output_dir`
    /// the directory where the file containing the output script
    ///  will be written
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    /// ## `callback`
    /// Function to call when result of this call is ready
    #[doc(alias = "osinfo_install_script_generate_output_for_media_async")]
    fn generate_output_for_media_async<P: FnOnce(Result<gio::File, glib::Error>) + 'static>(&self, media: &impl IsA<Media>, config: &impl IsA<InstallConfig>, output_dir: &impl IsA<gio::File>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn generate_output_for_media_async_trampoline<P: FnOnce(Result<gio::File, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) { unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_output_for_media_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }}
        let callback = generate_output_for_media_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_install_script_generate_output_for_media_async(self.as_ref().to_glib_none().0, media.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, output_dir.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn generate_output_for_media_future(&self, media: &(impl IsA<Media> + Clone + 'static), config: &(impl IsA<InstallConfig> + Clone + 'static), output_dir: &(impl IsA<gio::File> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::File, glib::Error>> + 'static>> {

        let media = media.clone();
        let config = config.clone();
        let output_dir = output_dir.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.generate_output_for_media_async(
                &media,
                &config,
                &output_dir,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    /// Creates an install script that is written to the returned file.
    /// ## `tree`
    /// the tree
    /// ## `config`
    /// the install script config
    /// ## `output_dir`
    /// the directory where the file containing the output script
    ///  will be written
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    ///
    /// # Returns
    ///
    /// a file containing the script.
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_install_script_generate_output_for_tree")]
    fn generate_output_for_tree(&self, tree: &impl IsA<Tree>, config: &impl IsA<InstallConfig>, output_dir: &impl IsA<gio::File>, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<gio::File, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_output_for_tree(self.as_ref().to_glib_none().0, tree.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, output_dir.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    /// Asynchronous variant of [`generate_output_for_tree()`][Self::generate_output_for_tree()].
    /// From the callback, call
    /// `osinfo_install_script_generate_output_for_tree_finish()` to conclude this
    /// call and get the generated file.
    /// ## `tree`
    /// the tree
    /// ## `config`
    /// the install script config
    /// ## `output_dir`
    /// the directory where the file containing the output script
    ///  will be written
    /// ## `cancellable`
    /// a [`gio::Cancellable`][crate::gio::Cancellable], or [`None`]
    /// ## `callback`
    /// Function to call when result of this call is ready
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "osinfo_install_script_generate_output_for_tree_async")]
    fn generate_output_for_tree_async<P: FnOnce(Result<gio::File, glib::Error>) + 'static>(&self, tree: &impl IsA<Tree>, config: &impl IsA<InstallConfig>, output_dir: &impl IsA<gio::File>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn generate_output_for_tree_async_trampoline<P: FnOnce(Result<gio::File, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) { unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::osinfo_install_script_generate_output_for_tree_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }}
        let callback = generate_output_for_tree_async_trampoline::<P>;
        unsafe {
            ffi::osinfo_install_script_generate_output_for_tree_async(self.as_ref().to_glib_none().0, tree.as_ref().to_glib_none().0, config.as_ref().to_glib_none().0, output_dir.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    fn generate_output_for_tree_future(&self, tree: &(impl IsA<Tree> + Clone + 'static), config: &(impl IsA<InstallConfig> + Clone + 'static), output_dir: &(impl IsA<gio::File> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::File, glib::Error>> + 'static>> {

        let tree = tree.clone();
        let config = config.clone();
        let output_dir = output_dir.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.generate_output_for_tree_async(
                &tree,
                &config,
                &output_dir,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    /// Some install scripts have restrictions on the format of the user avatar. Use
    /// this method to retrieve those restrictions in the form of an
    /// [`AvatarFormat`][crate::AvatarFormat] instance.
    ///
    /// # Returns
    ///
    /// The avatar format, or NULL if there is no restrictions on the
    ///  format of avatar
    #[doc(alias = "osinfo_install_script_get_avatar_format")]
    #[doc(alias = "get_avatar_format")]
    #[doc(alias = "avatar-format")]
    fn avatar_format(&self) -> Option<AvatarFormat> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_avatar_format(self.as_ref().to_glib_none().0))
        }
    }

    /// Whether install script can install drivers at the very end of installation
    /// This can be used for installing devices which the OS in question does not
    /// have out of the box support.
    ///
    /// # Returns
    ///
    /// TRUE if install script supports post-installable drivers, FALSE otherwise.
    #[doc(alias = "osinfo_install_script_get_can_post_install_drivers")]
    #[doc(alias = "get_can_post_install_drivers")]
    fn can_post_install_drivers(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_can_post_install_drivers(self.as_ref().to_glib_none().0))
        }
    }

    /// Whether install script can install drivers at the very beginning of
    /// installation. This is needed for devices for which the OS in question does
    /// not have out of the box support for and devices are required/preferred to be
    /// available during actual installation.
    ///
    /// # Returns
    ///
    /// TRUE if install script supports pre-installable drivers, FALSE otherwise.
    #[doc(alias = "osinfo_install_script_get_can_pre_install_drivers")]
    #[doc(alias = "get_can_pre_install_drivers")]
    fn can_pre_install_drivers(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_can_pre_install_drivers(self.as_ref().to_glib_none().0))
        }
    }

    /// Get a config param from the config param's list
    /// ## `name`
    /// name of the parameter
    ///
    /// # Returns
    ///
    /// the sought config param, if exists.
    ///  NULL otherwise.
    ///
    /// This code assumes that the 'id' and 'name' entity properties are
    /// the same.
    #[doc(alias = "osinfo_install_script_get_config_param")]
    #[doc(alias = "get_config_param")]
    fn config_param(&self, name: &str) -> Option<InstallConfigParam> {
        unsafe {
            from_glib_full(ffi::osinfo_install_script_get_config_param(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    /// Get the list of valid config parameters for `self`.
    ///
    /// # Returns
    ///
    /// the
    /// list of valid [`InstallConfigParam`][crate::InstallConfigParam] parameters. Free with
    /// `g_list_free()` when done. The elements are owned by libosinfo.
    #[doc(alias = "osinfo_install_script_get_config_param_list")]
    #[doc(alias = "get_config_param_list")]
    fn config_param_list(&self) -> Vec<InstallScript> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_install_script_get_config_param_list(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the list of valid config parameters for `self`.
    ///
    /// # Returns
    ///
    /// the list of valid [`InstallConfigParam`][crate::InstallConfigParam]
    /// parameters.
    #[doc(alias = "osinfo_install_script_get_config_params")]
    #[doc(alias = "get_config_params")]
    fn config_params(&self) -> Option<InstallConfigParamList> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_config_params(self.as_ref().to_glib_none().0))
        }
    }

    /// Some operating systems (as Windows) expect that script filename has
    /// particular name to work.
    ///
    /// # Returns
    ///
    /// the expected script filename
    #[doc(alias = "osinfo_install_script_get_expected_filename")]
    #[doc(alias = "get_expected_filename")]
    fn expected_filename(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_expected_filename(self.as_ref().to_glib_none().0))
        }
    }

    /// Retrieve the supported method to inject the script in to the installation process.
    ///
    /// # Returns
    ///
    /// bitwise-or of
    /// supported methods for install script injection.
    #[doc(alias = "osinfo_install_script_get_injection_methods")]
    #[doc(alias = "get_injection_methods")]
    fn injection_methods(&self) -> InstallScriptInjectionMethod {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_injection_methods(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the installation source to be used with the script. If none is set, it defaults to
    /// OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_MEDIA.
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_install_script_get_installation_source")]
    #[doc(alias = "get_installation_source")]
    #[doc(alias = "installation-source")]
    fn installation_source(&self) -> InstallScriptInstallationSource {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_installation_source(self.as_ref().to_glib_none().0))
        }
    }

    /// Some install scripts cannot ensure that they work without an internet connection.
    ///
    /// # Returns
    ///
    /// TRUE if script needs an internet connection, FALSE otherwise
    /// internet connection.
    #[doc(alias = "osinfo_install_script_get_needs_internet")]
    #[doc(alias = "get_needs_internet")]
    fn needs_internet(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_needs_internet(self.as_ref().to_glib_none().0))
        }
    }

    /// Some operating systems are able to use any script filename, allowing the
    /// application to set the filename as desired. libosinfo provides this
    /// functionality by set the expected filename's prefix using
    /// [`set_output_prefix()`][Self::set_output_prefix()] function.
    ///
    /// # Returns
    ///
    /// the output script filename
    #[doc(alias = "osinfo_install_script_get_output_filename")]
    #[doc(alias = "get_output_filename")]
    fn output_filename(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_output_filename(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the prefix of the file generated
    #[doc(alias = "osinfo_install_script_get_output_prefix")]
    #[doc(alias = "get_output_prefix")]
    fn output_prefix(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_output_prefix(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the path format to be used for the files and disks which will
    /// be used during the installation.
    ///
    /// # Returns
    ///
    /// the path format to be used. OSINFO_PATH_FORMAT_UNIX is the
    ///  default option.
    #[doc(alias = "osinfo_install_script_get_path_format")]
    #[doc(alias = "get_path_format")]
    #[doc(alias = "path-format")]
    fn path_format(&self) -> PathFormat {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_path_format(self.as_ref().to_glib_none().0))
        }
    }

    /// If install script can install drivers at the end of installation, this
    /// function retrieves the requirement about signed status of drivers.
    #[doc(alias = "osinfo_install_script_get_post_install_drivers_signing_req")]
    #[doc(alias = "get_post_install_drivers_signing_req")]
    fn post_install_drivers_signing_req(&self) -> DeviceDriverSigningReq {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_post_install_drivers_signing_req(self.as_ref().to_glib_none().0))
        }
    }

    /// If install script can install drivers at the very beginning of installation,
    /// this function retrieves the requirement about signed status of drivers.
    #[doc(alias = "osinfo_install_script_get_pre_install_drivers_signing_req")]
    #[doc(alias = "get_pre_install_drivers_signing_req")]
    fn pre_install_drivers_signing_req(&self) -> DeviceDriverSigningReq {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_pre_install_drivers_signing_req(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the preferred injection method for the script. If none is set and
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK is supported,
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK is returned, otherwise
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD is returned.
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_install_script_get_preferred_injection_method")]
    #[doc(alias = "get_preferred_injection_method")]
    #[doc(alias = "preferred-injection-method")]
    fn preferred_injection_method(&self) -> InstallScriptInjectionMethod {
        unsafe {
            from_glib(ffi::osinfo_install_script_get_preferred_injection_method(self.as_ref().to_glib_none().0))
        }
    }

    /// If this function returns a non-NULL string, it means that the `self`
    /// requires you to specify product registration key through [`InstallConfig`][crate::InstallConfig]
    /// instance passed to script generation methods.
    ///
    /// The returned string specifies the expected format of the product key like this:
    ///
    /// @ - any character
    /// % - alphabet
    /// # - numeric character
    /// $ - alphanumeric character
    ///
    /// All other characters represent themselves.
    ///
    /// For example in case of installer for Microsoft Windows XP, you'll get
    /// "$$$$$-$$$$$-$$$$$-$$$$$-$$$$$". That means a product key consists of 24
    /// alphanumeric characters and 4 '-' characters at (0-based) indices 5, 11, 17
    /// and 23.
    ///
    /// # Returns
    ///
    /// Product key format mask, or NULL.
    #[doc(alias = "osinfo_install_script_get_product_key_format")]
    #[doc(alias = "get_product_key_format")]
    #[doc(alias = "product-key-format")]
    fn product_key_format(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_product_key_format(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns a string representing the install script profile that's going to be
    /// used.
    ///
    /// The values supported are "jeos" for minimal installations and "desktop" for
    /// workstation/desktop installations.
    #[doc(alias = "osinfo_install_script_get_profile")]
    #[doc(alias = "get_profile")]
    fn profile(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_profile(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the stylesheet data used to construct the install script.
    #[doc(alias = "osinfo_install_script_get_template_data")]
    #[doc(alias = "get_template_data")]
    #[doc(alias = "template-data")]
    fn template_data(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_template_data(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the stylesheet URI used to construct the install script.
    #[doc(alias = "osinfo_install_script_get_template_uri")]
    #[doc(alias = "get_template_uri")]
    #[doc(alias = "template-uri")]
    fn template_uri(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_script_get_template_uri(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns whether the `self` has the `config_param` searched or not.
    ///
    /// This code assumes that the 'id' and 'name' entity properties are the same.
    /// ## `config_param`
    /// an [`InstallConfigParam`][crate::InstallConfigParam]
    #[doc(alias = "osinfo_install_script_has_config_param")]
    fn has_config_param(&self, config_param: &impl IsA<InstallConfigParam>) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_script_has_config_param(self.as_ref().to_glib_none().0, config_param.as_ref().to_glib_none().0))
        }
    }

    /// Returns whether the `self` has a configuration parameter matching `name` or not.
    /// ## `name`
    /// the configuration parameter name
    #[doc(alias = "osinfo_install_script_has_config_param_name")]
    fn has_config_param_name(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_script_has_config_param_name(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    /// Set the installation source to be used with the `self`.
    /// ## `source`
    /// one of the installation sources:
    /// OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_MEDIA,
    /// OSINFO_INSTALL_SCRIPT_INSTALLATION_SOURCE_NETWORK
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_install_script_set_installation_source")]
    fn set_installation_source(&self, source: InstallScriptInstallationSource) {
        unsafe {
            ffi::osinfo_install_script_set_installation_source(self.as_ref().to_glib_none().0, source.into_glib());
        }
    }

    /// Mind that not all installers support any name for the installer scripts.
    /// ## `prefix`
    /// a prefix to be added to the file generated
    #[doc(alias = "osinfo_install_script_set_output_prefix")]
    fn set_output_prefix(&self, prefix: &str) {
        unsafe {
            ffi::osinfo_install_script_set_output_prefix(self.as_ref().to_glib_none().0, prefix.to_glib_none().0);
        }
    }

    /// Set the preferred injection method to be used with the `self`
    /// ## `method`
    /// one of the injection methods:
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_CDROM,
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK,
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_FLOPPY,
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD,
    /// OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_WEB
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_install_script_set_preferred_injection_method")]
    #[doc(alias = "preferred-injection-method")]
    fn set_preferred_injection_method(&self, method: InstallScriptInjectionMethod) {
        unsafe {
            ffi::osinfo_install_script_set_preferred_injection_method(self.as_ref().to_glib_none().0, method.into_glib());
        }
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    #[doc(alias = "installation-source")]
    fn installation_source(&self) -> InstallScriptInstallationSource {
        ObjectExt::property(self.as_ref(), "installation-source")
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    #[doc(alias = "preferred-injection-method")]
    fn preferred_injection_method(&self) -> InstallScriptInjectionMethod {
        ObjectExt::property(self.as_ref(), "preferred-injection-method")
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    #[doc(alias = "preferred-injection-method")]
    fn set_preferred_injection_method(&self, preferred_injection_method: InstallScriptInjectionMethod) {
        ObjectExt::set_property(self.as_ref(),"preferred-injection-method", preferred_injection_method)
    }

    #[doc(alias = "avatar-format")]
    fn connect_avatar_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_avatar_format_trampoline<P: IsA<InstallScript>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallScript, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallScript::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::avatar-format".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_avatar_format_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "installation-source")]
    fn connect_installation_source_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_installation_source_trampoline<P: IsA<InstallScript>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallScript, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallScript::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::installation-source".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_installation_source_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "path-format")]
    fn connect_path_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_path_format_trampoline<P: IsA<InstallScript>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallScript, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallScript::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::path-format".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_path_format_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "preferred-injection-method")]
    fn connect_preferred_injection_method_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_preferred_injection_method_trampoline<P: IsA<InstallScript>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallScript, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallScript::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::preferred-injection-method".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_preferred_injection_method_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "product-key-format")]
    fn connect_product_key_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_product_key_format_trampoline<P: IsA<InstallScript>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallScript, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallScript::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::product-key-format".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_product_key_format_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<InstallScript>> InstallScriptExt for O {}
