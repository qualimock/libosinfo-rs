// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Entity};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `architecture`
    ///  The target hardware architecture of this firmware.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `type`
    ///  Readable | Writeable
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`FirmwareExt`][trait@crate::prelude::FirmwareExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoFirmware")]
    pub struct Firmware(Object<ffi::OsinfoFirmware, ffi::OsinfoFirmwareClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_firmware_get_type(),
    }
}

impl Firmware {
        pub const NONE: Option<&'static Firmware> = None;
    

    #[doc(alias = "osinfo_firmware_new")]
    pub fn new(id: &str, architecture: &str, type_: &str) -> Firmware {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_firmware_new(id.to_glib_none().0, architecture.to_glib_none().0, type_.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Firmware`] objects.
            ///
            /// This method returns an instance of [`FirmwareBuilder`](crate::builders::FirmwareBuilder) which can be used to create [`Firmware`] objects.
            pub fn builder() -> FirmwareBuilder {
                FirmwareBuilder::new()
            }
        
}

impl Default for Firmware {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Firmware`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct FirmwareBuilder {
            builder: glib::object::ObjectBuilder<'static, Firmware>,
        }

        impl FirmwareBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The target hardware architecture of this firmware.
                            pub fn architecture(self, architecture: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("architecture", architecture.into()), }
                        }

                            pub fn type_(self, type_: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("type", type_.into()), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Firmware`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Firmware {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Firmware`] methods.
///
/// # Implementors
///
/// [`Firmware`][struct@crate::Firmware]
pub trait FirmwareExt: IsA<Firmware> + 'static {
    /// Retrieves the target hardware architecture of the OS `self` provides.
    ///
    /// # Returns
    ///
    /// the hardware architecture, or NULL
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_firmware_get_architecture")]
    #[doc(alias = "get_architecture")]
    fn architecture(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_firmware_get_architecture(self.as_ref().to_glib_none().0))
        }
    }

    /// The type of the `self`
    ///
    /// # Returns
    ///
    /// the type, or NULL
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_firmware_get_firmware_type")]
    #[doc(alias = "get_firmware_type")]
    fn firmware_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_firmware_get_firmware_type(self.as_ref().to_glib_none().0))
        }
    }

    /// Whether the `self` is supported or not
    ///
    /// # Returns
    ///
    /// TRUE if supported, FALSE otherwise.
    #[cfg(feature = "v1_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_8")))]
    #[doc(alias = "osinfo_firmware_is_supported")]
    fn is_supported(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_firmware_is_supported(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(not(feature = "v1_7"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_7"))))]
    fn architecture(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "architecture")
    }

    /// The target hardware architecture of this firmware.
    fn set_architecture(&self, architecture: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"architecture", architecture)
    }

    #[doc(alias = "type")]
    fn type_(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "type")
    }

    #[doc(alias = "type")]
    fn set_type(&self, type_: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"type", type_)
    }

    #[doc(alias = "architecture")]
    fn connect_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_architecture_trampoline<P: IsA<Firmware>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoFirmware, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Firmware::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::architecture".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_architecture_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<Firmware>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoFirmware, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Firmware::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::type".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Firmware>> FirmwareExt for O {}
