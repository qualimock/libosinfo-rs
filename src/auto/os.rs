// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Device,DeviceDriver,DeviceDriverList,DeviceLink,DeviceLinkList,DeviceList,Entity,Filter,InstallScript,InstallScriptList,Media,MediaList,OsVariant,OsVariantList,Product,ReleaseStatus,Resources,ResourcesList,Tree,TreeList};
#[cfg(feature = "v1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
use crate::{Image,ImageList};
#[cfg(feature = "v1_7")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
use crate::{Firmware,FirmwareList};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `cloud-image-username`
    ///  The username to be passed to the cloud-init program.
    ///
    /// Readable
    ///
    ///
    /// #### `distro`
    ///  The generic distro this OS belongs to, for example fedora, windows,
    /// solaris, freebsd etc.
    ///
    /// Readable
    ///
    ///
    /// #### `family`
    ///  The generic family this OS belongs to, based upon its kernel,
    /// for example linux, winnt, solaris, freebsd etc.
    ///
    /// Readable
    ///
    ///
    /// #### `kernel-url-argument`
    ///  The argument to be passed to kernel command line when performing a
    /// tree based installation of this OS.
    ///
    /// Readable
    /// <details><summary><h4>Product</h4></summary>
    ///
    ///
    /// #### `codename`
    ///  The codename of this product.
    ///
    /// Readable
    ///
    ///
    /// #### `logo`
    ///  The URI of the logo of the product.
    ///
    /// Readable
    ///
    ///
    /// #### `name`
    ///  The name of this product.
    ///
    /// Readable
    ///
    ///
    /// #### `short-id`
    ///  The short ID of this product.
    ///
    /// Readable
    ///
    ///
    /// #### `vendor`
    ///  The Vendor of this product.
    ///
    /// Readable
    ///
    ///
    /// #### `version`
    ///  The version of the product.
    ///
    /// Readable
    /// </details>
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`OsExt`][trait@crate::prelude::OsExt], [`ProductExt`][trait@crate::prelude::ProductExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoOs")]
    pub struct Os(Object<ffi::OsinfoOs, ffi::OsinfoOsClass>) @extends Product, Entity;

    match fn {
        type_ => || ffi::osinfo_os_get_type(),
    }
}

impl Os {
        pub const NONE: Option<&'static Os> = None;
    

    /// Create a new operating system entity
    /// ## `id`
    /// a unique identifier
    ///
    /// # Returns
    ///
    /// a new operating system entity
    #[doc(alias = "osinfo_os_new")]
    pub fn new(id: &str) -> Os {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_os_new(id.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Os`] objects.
            ///
            /// This method returns an instance of [`OsBuilder`](crate::builders::OsBuilder) which can be used to create [`Os`] objects.
            pub fn builder() -> OsBuilder {
                OsBuilder::new()
            }
        
}

impl Default for Os {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Os`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct OsBuilder {
            builder: glib::object::ObjectBuilder<'static, Os>,
        }

        impl OsBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Os`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Os {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Os`] methods.
///
/// # Implementors
///
/// [`Os`][struct@crate::Os]
pub trait OsExt: IsA<Os> + 'static {
    /// Associated a device with an operating system. The
    /// returned [`DeviceLink`][crate::DeviceLink] can be used to record
    /// extra metadata against the link
    /// ## `dev`
    /// the device to associate with
    ///
    /// # Returns
    ///
    /// the device association
    #[doc(alias = "osinfo_os_add_device")]
    fn add_device(&self, dev: &impl IsA<Device>) -> Option<DeviceLink> {
        unsafe {
            from_glib_none(ffi::osinfo_os_add_device(self.as_ref().to_glib_none().0, dev.as_ref().to_glib_none().0))
        }
    }

    /// Adds `driver` to the list of device drivers of operating system `self`.
    /// ## `driver`
    /// the device driver to add
    #[doc(alias = "osinfo_os_add_device_driver")]
    fn add_device_driver(&self, driver: &impl IsA<DeviceDriver>) {
        unsafe {
            ffi::osinfo_os_add_device_driver(self.as_ref().to_glib_none().0, driver.as_ref().to_glib_none().0);
        }
    }

    /// Adds `firmware` to the list of firmwares of operating system `self`.
    /// ## `firmware`
    /// the firmware to add
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_os_add_firmware")]
    fn add_firmware(&self, firmware: &impl IsA<Firmware>) {
        unsafe {
            ffi::osinfo_os_add_firmware(self.as_ref().to_glib_none().0, firmware.as_ref().to_glib_none().0);
        }
    }

    /// Adds an installed image `image` to operating system `self`.
    /// ## `image`
    /// the image to add
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_add_image")]
    fn add_image(&self, image: &impl IsA<Image>) {
        unsafe {
            ffi::osinfo_os_add_image(self.as_ref().to_glib_none().0, image.as_ref().to_glib_none().0);
        }
    }

    /// Adds `script` to the list of scripts of operating system `self`.
    /// ## `script`
    /// the install script to add
    #[doc(alias = "osinfo_os_add_install_script")]
    fn add_install_script(&self, script: &impl IsA<InstallScript>) {
        unsafe {
            ffi::osinfo_os_add_install_script(self.as_ref().to_glib_none().0, script.as_ref().to_glib_none().0);
        }
    }

    /// Adds `resources` to list of maximum resources of operating system `self`.
    /// ## `resources`
    /// the resources to add
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_add_maximum_resources")]
    fn add_maximum_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_maximum_resources(self.as_ref().to_glib_none().0, resources.as_ref().to_glib_none().0);
        }
    }

    /// Adds installation media `media` to operating system `self`.
    /// ## `media`
    /// the media to add
    #[doc(alias = "osinfo_os_add_media")]
    fn add_media(&self, media: &impl IsA<Media>) {
        unsafe {
            ffi::osinfo_os_add_media(self.as_ref().to_glib_none().0, media.as_ref().to_glib_none().0);
        }
    }

    /// Adds `resources` to list of minimum resources of operating system `self`.
    /// ## `resources`
    /// the resources to add
    #[doc(alias = "osinfo_os_add_minimum_resources")]
    fn add_minimum_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_minimum_resources(self.as_ref().to_glib_none().0, resources.as_ref().to_glib_none().0);
        }
    }

    /// Adds `resources` to list of resources needed for network installing an
    /// operating system `self`.
    /// ## `resources`
    /// the resources to add
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_add_network_install_resources")]
    fn add_network_install_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_network_install_resources(self.as_ref().to_glib_none().0, resources.as_ref().to_glib_none().0);
        }
    }

    /// Adds `resources` to list of recommended resources of operating system `self`.
    /// ## `resources`
    /// the resources to add
    #[doc(alias = "osinfo_os_add_recommended_resources")]
    fn add_recommended_resources(&self, resources: &impl IsA<Resources>) {
        unsafe {
            ffi::osinfo_os_add_recommended_resources(self.as_ref().to_glib_none().0, resources.as_ref().to_glib_none().0);
        }
    }

    /// Adds installation tree `tree` to operating system `self`.
    /// ## `tree`
    /// the tree to add
    #[doc(alias = "osinfo_os_add_tree")]
    fn add_tree(&self, tree: &impl IsA<Tree>) {
        unsafe {
            ffi::osinfo_os_add_tree(self.as_ref().to_glib_none().0, tree.as_ref().to_glib_none().0);
        }
    }

    /// Adds a variant `variant` to operating system `self`.
    /// ## `variant`
    /// the variant to add
    #[doc(alias = "osinfo_os_add_variant")]
    fn add_variant(&self, variant: &impl IsA<OsVariant>) {
        unsafe {
            ffi::osinfo_os_add_variant(self.as_ref().to_glib_none().0, variant.as_ref().to_glib_none().0);
        }
    }

    /// ## `profile`
    /// the install script profile that must be either
    /// OSINFO_INSTALL_SCRIPT_PROFILE_DESKTOP or OSINFO_INSTALL_SCRIPT_PROFILE_JEOS
    ///
    /// # Returns
    ///
    /// A new [`InstallScript`][crate::InstallScript] for the `self` `profile`
    #[doc(alias = "osinfo_os_find_install_script")]
    fn find_install_script(&self, profile: &str) -> Option<InstallScript> {
        unsafe {
            from_glib_none(ffi::osinfo_os_find_install_script(self.as_ref().to_glib_none().0, profile.to_glib_none().0))
        }
    }

    /// Get all devicelinks matching a given filter but unlike
    /// osinfo_os_get_device_links this function also retrieves devices from all
    /// derived and cloned operating systems.
    /// ## `filter`
    /// an optional device property filter
    ///
    /// # Returns
    ///
    /// A list of OsinfoDeviceLink
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_all_device_links")]
    #[doc(alias = "get_all_device_links")]
    fn all_device_links(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_all_device_links(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Get all devices matching a given filter but unlike osinfo_os_get_devices
    /// this function also retrieves devices from all derived and cloned operating
    /// systems.
    /// ## `filter`
    /// an optional device property filter
    ///
    /// # Returns
    ///
    /// A list of devices
    #[doc(alias = "osinfo_os_get_all_devices")]
    #[doc(alias = "get_all_devices")]
    fn all_devices(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_all_devices(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Gets the username expected to be passed to the cloud image when performing
    /// installation.
    ///
    /// # Returns
    ///
    /// the username, if present. Otherwise, NULL.
    #[doc(alias = "osinfo_os_get_cloud_image_username")]
    #[doc(alias = "get_cloud_image_username")]
    #[doc(alias = "cloud-image-username")]
    fn cloud_image_username(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_cloud_image_username(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the complete firmwares matching a given filter, including the non-supported ones.
    /// ## `filter`
    /// an optional firmware property filter
    ///
    /// # Returns
    ///
    /// A list of firmwares
    #[cfg(feature = "v1_10")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_10")))]
    #[doc(alias = "osinfo_os_get_complete_firmware_list")]
    #[doc(alias = "get_complete_firmware_list")]
    fn complete_firmware_list(&self, filter: Option<&impl IsA<Filter>>) -> Option<FirmwareList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_complete_firmware_list(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Gets list of all available device drivers for OS `self`.
    ///
    /// # Returns
    ///
    /// A list of device drivers
    #[doc(alias = "osinfo_os_get_device_drivers")]
    #[doc(alias = "get_device_drivers")]
    fn device_drivers(&self) -> Option<DeviceDriverList> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_device_drivers(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets list of the highest priority device drivers for OS `self`.
    ///
    /// # Returns
    ///
    /// A list of device drivers
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_os_get_device_drivers_prioritized")]
    #[doc(alias = "get_device_drivers_prioritized")]
    fn device_drivers_prioritized(&self) -> Option<DeviceDriverList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_device_drivers_prioritized(self.as_ref().to_glib_none().0))
        }
    }

    /// Get all devices matching a given filter. The filter
    /// matches against the links, not the devices.
    /// ## `filter`
    /// an optional device property filter
    ///
    /// # Returns
    ///
    /// A list of device links
    #[doc(alias = "osinfo_os_get_device_links")]
    #[doc(alias = "get_device_links")]
    fn device_links(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_device_links(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Get all devices matching a given filter
    /// ## `filter`
    /// an optional device property filter
    ///
    /// # Returns
    ///
    /// A list of devices
    #[doc(alias = "osinfo_os_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_devices(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// A utility function that gets devices found from the list of devices
    /// `self` supports, for which the value of `property` is `value`.
    /// ## `property`
    /// the property of interest
    /// ## `value`
    /// the required value of property `property`
    /// ## `inherited`
    /// Should devices from inherited and cloned OSs be included in the
    /// search.
    ///
    /// # Returns
    ///
    /// The found devices
    #[doc(alias = "osinfo_os_get_devices_by_property")]
    #[doc(alias = "get_devices_by_property")]
    fn devices_by_property(&self, property: &str, value: &str, inherited: bool) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_devices_by_property(self.as_ref().to_glib_none().0, property.to_glib_none().0, value.to_glib_none().0, inherited.into_glib()))
        }
    }

    /// Retrieves the generic family the OS `self` belongs to, for example fedora,
    /// ubuntu, windows, solaris, freebsd etc.
    ///
    /// # Returns
    ///
    /// the distro of this os
    #[doc(alias = "osinfo_os_get_distro")]
    #[doc(alias = "get_distro")]
    fn distro(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_distro(self.as_ref().to_glib_none().0))
        }
    }

    /// Retrieves the generic family the OS `self` belongs to, based upon its kernel,
    /// for example linux, winnt, solaris, freebsd etc.
    ///
    /// # Returns
    ///
    /// the family of this os
    #[doc(alias = "osinfo_os_get_family")]
    #[doc(alias = "get_family")]
    fn family(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_family(self.as_ref().to_glib_none().0))
        }
    }

    /// Get all the supported firmwares matching a given filter
    /// ## `filter`
    /// an optional firmware property filter
    ///
    /// # Returns
    ///
    /// A list of firmwares
    #[cfg(feature = "v1_7")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_7")))]
    #[doc(alias = "osinfo_os_get_firmware_list")]
    #[doc(alias = "get_firmware_list")]
    fn firmware_list(&self, filter: Option<&impl IsA<Filter>>) -> Option<FirmwareList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_firmware_list(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Get all installed images associated with operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of images
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_image_list")]
    #[doc(alias = "get_image_list")]
    fn image_list(&self) -> Option<ImageList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_image_list(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// a list of the install scripts for the specified os
    #[doc(alias = "osinfo_os_get_install_script_list")]
    #[doc(alias = "get_install_script_list")]
    fn install_script_list(&self) -> Option<InstallScriptList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_install_script_list(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the argument expected to be passed to the kernel command line when
    /// performing a tree based installation.
    ///
    /// # Returns
    ///
    /// the kernel url argument, if present. Otherwise,
    /// NULL.
    #[doc(alias = "osinfo_os_get_kernel_url_argument")]
    #[doc(alias = "get_kernel_url_argument")]
    #[doc(alias = "kernel-url-argument")]
    fn kernel_url_argument(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_os_get_kernel_url_argument(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the list of maximum resources for the operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of resources
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_maximum_resources")]
    #[doc(alias = "get_maximum_resources")]
    fn maximum_resources(&self) -> Option<ResourcesList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_maximum_resources(self.as_ref().to_glib_none().0))
        }
    }

    /// Get all installation medias associated with operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of medias
    #[doc(alias = "osinfo_os_get_media_list")]
    #[doc(alias = "get_media_list")]
    fn media_list(&self) -> Option<MediaList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_media_list(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the list of minimum required resources for the operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of resources
    #[doc(alias = "osinfo_os_get_minimum_resources")]
    #[doc(alias = "get_minimum_resources")]
    fn minimum_resources(&self) -> Option<ResourcesList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_minimum_resources(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the list of resources needed for network installing an operating system
    /// `self`.
    ///
    /// # Returns
    ///
    /// A list of resources
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_os_get_network_install_resources")]
    #[doc(alias = "get_network_install_resources")]
    fn network_install_resources(&self) -> Option<ResourcesList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_network_install_resources(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the list of recommended resources for the operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of resources
    #[doc(alias = "osinfo_os_get_recommended_resources")]
    #[doc(alias = "get_recommended_resources")]
    fn recommended_resources(&self) -> Option<ResourcesList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_recommended_resources(self.as_ref().to_glib_none().0))
        }
    }

    /// Use this to determine the release status of the `self`.
    ///
    /// # Returns
    ///
    /// release status of `self`.
    #[doc(alias = "osinfo_os_get_release_status")]
    #[doc(alias = "get_release_status")]
    fn release_status(&self) -> ReleaseStatus {
        unsafe {
            from_glib(ffi::osinfo_os_get_release_status(self.as_ref().to_glib_none().0) as i32)
        }
    }

    /// Get all installation trees associated with operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of trees
    #[doc(alias = "osinfo_os_get_tree_list")]
    #[doc(alias = "get_tree_list")]
    fn tree_list(&self) -> Option<TreeList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_tree_list(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets all known variants of operating system `self`.
    ///
    /// # Returns
    ///
    /// A list of variants
    #[doc(alias = "osinfo_os_get_variant_list")]
    #[doc(alias = "get_variant_list")]
    fn variant_list(&self) -> Option<OsVariantList> {
        unsafe {
            from_glib_full(ffi::osinfo_os_get_variant_list(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "cloud-image-username")]
    fn connect_cloud_image_username_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cloud_image_username_trampoline<P: IsA<Os>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoOs, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::cloud-image-username".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cloud_image_username_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "distro")]
    fn connect_distro_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_distro_trampoline<P: IsA<Os>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoOs, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::distro".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_distro_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "family")]
    fn connect_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_family_trampoline<P: IsA<Os>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoOs, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::family".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_family_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "kernel-url-argument")]
    fn connect_kernel_url_argument_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_kernel_url_argument_trampoline<P: IsA<Os>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoOs, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Os::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::kernel-url-argument".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_kernel_url_argument_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Os>> OsExt for O {}
