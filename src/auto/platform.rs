// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Device,DeviceLink,DeviceLinkList,DeviceList,Entity,Filter,Product};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`PlatformExt`][trait@crate::prelude::PlatformExt], [`ProductExt`][trait@crate::prelude::ProductExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoPlatform")]
    pub struct Platform(Object<ffi::OsinfoPlatform, ffi::OsinfoPlatformClass>) @extends Product, Entity;

    match fn {
        type_ => || ffi::osinfo_platform_get_type(),
    }
}

impl Platform {
        pub const NONE: Option<&'static Platform> = None;
    

    /// Create a new platform entity
    /// ## `id`
    /// a unique identifier
    ///
    /// # Returns
    ///
    /// A platform entity
    #[doc(alias = "osinfo_platform_new")]
    pub fn new(id: &str) -> Platform {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_platform_new(id.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Platform`] objects.
            ///
            /// This method returns an instance of [`PlatformBuilder`](crate::builders::PlatformBuilder) which can be used to create [`Platform`] objects.
            pub fn builder() -> PlatformBuilder {
                PlatformBuilder::new()
            }
        
}

impl Default for Platform {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Platform`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PlatformBuilder {
            builder: glib::object::ObjectBuilder<'static, Platform>,
        }

        impl PlatformBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Platform`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Platform {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Platform`] methods.
///
/// # Implementors
///
/// [`Platform`][struct@crate::Platform]
pub trait PlatformExt: IsA<Platform> + 'static {
    /// Associate a device with a platform. The returned [`DeviceLink`][crate::DeviceLink]
    /// can be used to record extra metadata against the link
    /// ## `dev`
    /// the device to associate
    ///
    /// # Returns
    ///
    /// the device association
    #[doc(alias = "osinfo_platform_add_device")]
    fn add_device(&self, dev: &impl IsA<Device>) -> Option<DeviceLink> {
        unsafe {
            from_glib_none(ffi::osinfo_platform_add_device(self.as_ref().to_glib_none().0, dev.as_ref().to_glib_none().0))
        }
    }

    /// Get all platforms matching a given filter but unlike
    /// osinfo_platform_get_devices this function also retrieves devices from
    /// all derived and upgraded platforms.
    /// ## `filter`
    /// an optional device property filter
    ///
    /// # Returns
    ///
    /// A list of devices
    #[doc(alias = "osinfo_platform_get_all_devices")]
    #[doc(alias = "get_all_devices")]
    fn all_devices(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_platform_get_all_devices(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Retrieve all the associated devices matching the filter.
    /// The filter matches against the link, not the device.
    /// ## `filter`
    /// an optional filter
    ///
    /// # Returns
    ///
    /// a list of [`Device`][crate::Device] entities
    #[doc(alias = "osinfo_platform_get_device_links")]
    #[doc(alias = "get_device_links")]
    fn device_links(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_platform_get_device_links(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Retrieve all the associated devices matching the filter.
    /// The filter matches against the device, not the link.
    /// ## `filter`
    /// an optional filter
    ///
    /// # Returns
    ///
    /// a list of [`Device`][crate::Device] entities
    #[doc(alias = "osinfo_platform_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_platform_get_devices(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }
}

impl<O: IsA<Platform>> PlatformExt for O {}
