// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// This is an Abstract Base Class, you cannot instantiate it.
    ///
    /// ## Properties
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    ///
    /// # Implements
    ///
    /// [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoEntity")]
    pub struct Entity(Object<ffi::OsinfoEntity, ffi::OsinfoEntityClass>);

    match fn {
        type_ => || ffi::osinfo_entity_get_type(),
    }
}

impl Entity {
        pub const NONE: Option<&'static Entity> = None;
    
}

/// Trait containing all [`struct@Entity`] methods.
///
/// # Implementors
///
/// [`AvatarFormat`][struct@crate::AvatarFormat], [`Datamap`][struct@crate::Datamap], [`Deployment`][struct@crate::Deployment], [`DeviceDriver`][struct@crate::DeviceDriver], [`DeviceLink`][struct@crate::DeviceLink], [`Device`][struct@crate::Device], [`Entity`][struct@crate::Entity], [`Firmware`][struct@crate::Firmware], [`Image`][struct@crate::Image], [`InstallConfigParam`][struct@crate::InstallConfigParam], [`InstallConfig`][struct@crate::InstallConfig], [`InstallScript`][struct@crate::InstallScript], [`Media`][struct@crate::Media], [`OsVariant`][struct@crate::OsVariant], [`Product`][struct@crate::Product], [`Resources`][struct@crate::Resources], [`Tree`][struct@crate::Tree]
pub trait EntityExt: IsA<Entity> + 'static {
    /// Adds a new parameter against the entity. A key can have multiple
    /// values associated. Thus repeated calls with the same key will
    /// build up a list of possible values.
    /// ## `key`
    /// the name of the key
    /// ## `value`
    /// the data to associated with that key
    #[doc(alias = "osinfo_entity_add_param")]
    fn add_param(&self, key: &str, value: &str) {
        unsafe {
            ffi::osinfo_entity_add_param(self.as_ref().to_glib_none().0, key.to_glib_none().0, value.to_glib_none().0);
        }
    }

    /// Remove all values associated with a key
    /// ## `key`
    /// the name of the key
    #[doc(alias = "osinfo_entity_clear_param")]
    fn clear_param(&self, key: &str) {
        unsafe {
            ffi::osinfo_entity_clear_param(self.as_ref().to_glib_none().0, key.to_glib_none().0);
        }
    }

    /// Retrieves the unique key for the entity. The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    ///
    /// # Returns
    ///
    /// the unique key for the entity
    #[doc(alias = "osinfo_entity_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_entity_get_id(self.as_ref().to_glib_none().0))
        }
    }

    /// Retrieve all the known parameter keys associated with
    /// the entity
    ///
    /// # Returns
    ///
    /// The list of string parameters
    #[doc(alias = "osinfo_entity_get_param_keys")]
    #[doc(alias = "get_param_keys")]
    fn param_keys(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_entity_get_param_keys(self.as_ref().to_glib_none().0))
        }
    }

    /// Retrieve the parameter value associated with a named key. If
    /// multiple values are stored against the key, only the first
    /// value is returned. If no value is associated, NULL is returned
    /// ## `key`
    /// the name of the key
    ///
    /// # Returns
    ///
    /// the value associated with the key, or NULL
    #[doc(alias = "osinfo_entity_get_param_value")]
    #[doc(alias = "get_param_value")]
    fn param_value(&self, key: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_entity_get_param_value(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    /// Retrieve the parameter value associated with a named key as a
    /// boolean. If multiple values are stored against the key, only the
    /// first value is returned. If no value is associated, FALSE is returned
    /// ## `key`
    /// the name of the key
    ///
    /// # Returns
    ///
    /// the value associated with the key as a boolean, or FALSE
    #[doc(alias = "osinfo_entity_get_param_value_boolean")]
    #[doc(alias = "get_param_value_boolean")]
    fn is_param_value_boolean(&self, key: &str) -> bool {
        unsafe {
            from_glib(ffi::osinfo_entity_get_param_value_boolean(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    /// Retrieve the parameter value associated with a named key as a
    /// boolean. If multiple values are stored against the key, only the
    /// first value is returned. If no value is associated, `default_value`
    /// is returned.
    /// ## `key`
    /// the name of the key
    /// ## `default_value`
    /// the value to be returned in case there's no value
    ///  associated with the `key`
    ///
    /// # Returns
    ///
    /// the value associated with the key as a boolean, or
    /// `default_value`
    #[doc(alias = "osinfo_entity_get_param_value_boolean_with_default")]
    #[doc(alias = "get_param_value_boolean_with_default")]
    fn is_param_value_boolean_with_default(&self, key: &str, default_value: bool) -> bool {
        unsafe {
            from_glib(ffi::osinfo_entity_get_param_value_boolean_with_default(self.as_ref().to_glib_none().0, key.to_glib_none().0, default_value.into_glib()))
        }
    }

    /// Retrieve the parameter value associated with a named key as an
    /// enum value. If multiple values are stored against the key, only
    /// the first value is returned. If no value is associated, the
    /// `default_value` is returned.
    /// ## `key`
    /// the name of the key
    /// ## `enum_type`
    /// the enum type
    /// ## `default_value`
    /// the default value to be used, in case there's
    ///  no value associated with the key
    ///
    /// # Returns
    ///
    /// the enum value associated with the key, or `default_value`.
    #[doc(alias = "osinfo_entity_get_param_value_enum")]
    #[doc(alias = "get_param_value_enum")]
    fn param_value_enum(&self, key: &str, enum_type: glib::types::Type, default_value: i32) -> i32 {
        unsafe {
            ffi::osinfo_entity_get_param_value_enum(self.as_ref().to_glib_none().0, key.to_glib_none().0, enum_type.into_glib(), default_value)
        }
    }

    /// Retrieve the parameter value associated with a named key as an
    /// int64. If multiple values are stored against the key, only the
    /// first value is returned. If no value is associated, -1 is returned.
    /// ## `key`
    /// the name of the key
    ///
    /// # Returns
    ///
    /// the value associated with the key as an int64, or -1.
    #[doc(alias = "osinfo_entity_get_param_value_int64")]
    #[doc(alias = "get_param_value_int64")]
    fn param_value_int64(&self, key: &str) -> i64 {
        unsafe {
            ffi::osinfo_entity_get_param_value_int64(self.as_ref().to_glib_none().0, key.to_glib_none().0)
        }
    }

    /// Retrieve the parameter value associated with a named key as an
    /// int64. If multiple values are stored against the key, only the
    /// first value is returned. If no value is associated, `default_value`
    /// is returned.
    /// ## `key`
    /// the name of the key
    /// ## `default_value`
    /// the value to be returned in case there's no value
    ///  associated with the `key`
    ///
    /// # Returns
    ///
    /// the value associated with the key as an int64, or
    /// `default_value`
    #[doc(alias = "osinfo_entity_get_param_value_int64_with_default")]
    #[doc(alias = "get_param_value_int64_with_default")]
    fn param_value_int64_with_default(&self, key: &str, default_value: i64) -> i64 {
        unsafe {
            ffi::osinfo_entity_get_param_value_int64_with_default(self.as_ref().to_glib_none().0, key.to_glib_none().0, default_value)
        }
    }

    /// Retrieve all the parameter values associated with a named
    /// key. If no values are associated, NULL is returned
    /// ## `key`
    /// the name of the key
    ///
    /// # Returns
    ///
    /// the values associated with the key
    #[doc(alias = "osinfo_entity_get_param_value_list")]
    #[doc(alias = "get_param_value_list")]
    fn param_value_list(&self, key: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_entity_get_param_value_list(self.as_ref().to_glib_none().0, key.to_glib_none().0))
        }
    }

    /// Sets a new parameter against the entity. If the key already
    /// has a value associated with it, the existing value will be
    /// cleared.
    /// ## `key`
    /// the name of the key
    /// ## `value`
    /// the data to associated with that key
    #[doc(alias = "osinfo_entity_set_param")]
    fn set_param(&self, key: &str, value: &str) {
        unsafe {
            ffi::osinfo_entity_set_param(self.as_ref().to_glib_none().0, key.to_glib_none().0, value.to_glib_none().0);
        }
    }

    /// Sets a new parameter against the entity. If the key already
    /// has a value associated with it, the existing value will be
    /// cleared.
    /// ## `key`
    /// the name of the key
    /// ## `value`
    /// the boolean value to be associated with that key
    #[doc(alias = "osinfo_entity_set_param_boolean")]
    fn set_param_boolean(&self, key: &str, value: bool) {
        unsafe {
            ffi::osinfo_entity_set_param_boolean(self.as_ref().to_glib_none().0, key.to_glib_none().0, value.into_glib());
        }
    }

    /// Sets a new parameter against the entity. If the key already
    /// has a value associated with it, the existing value will be
    /// cleared.
    /// ## `key`
    /// the name of the key
    /// ## `value`
    /// the enum value to be associated with that key
    /// ## `enum_type`
    /// the enum type
    #[doc(alias = "osinfo_entity_set_param_enum")]
    fn set_param_enum(&self, key: &str, value: i32, enum_type: glib::types::Type) {
        unsafe {
            ffi::osinfo_entity_set_param_enum(self.as_ref().to_glib_none().0, key.to_glib_none().0, value, enum_type.into_glib());
        }
    }

    /// Sets a new parameter against the entity. If the key already
    /// has a value associated with it, the existing value will be
    /// cleared.
    /// ## `key`
    /// the name of the key
    /// ## `value`
    /// the int64 value to be associated with that key
    #[doc(alias = "osinfo_entity_set_param_int64")]
    fn set_param_int64(&self, key: &str, value: i64) {
        unsafe {
            ffi::osinfo_entity_set_param_int64(self.as_ref().to_glib_none().0, key.to_glib_none().0, value);
        }
    }

    /// The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    fn set_id(&self, id: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"id", id)
    }

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<Entity>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoEntity, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Entity::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::id".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Entity>> EntityExt for O {}
