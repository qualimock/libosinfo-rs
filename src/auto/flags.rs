// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi};
use glib::{bitflags::bitflags,prelude::*,translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "OsinfoInstallScriptInjectionMethod")]
    pub struct InstallScriptInjectionMethod: u32 {
        /// Support injection of the
        /// installation script through a CD-ROM.
        #[doc(alias = "OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_CDROM")]
        const CDROM = ffi::OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_CDROM as _;
        /// Support injection of the
        /// installation script through a disk.
        #[doc(alias = "OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK")]
        const DISK = ffi::OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_DISK as _;
        /// Support injection of the
        /// installation script through a floppy disk.
        #[doc(alias = "OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_FLOPPY")]
        const FLOPPY = ffi::OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_FLOPPY as _;
        /// Support injection of the
        /// installation script through the initrd.
        #[doc(alias = "OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD")]
        const INITRD = ffi::OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_INITRD as _;
        /// Support injection of the
        /// installation script from the web.
        #[doc(alias = "OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_WEB")]
        const WEB = ffi::OSINFO_INSTALL_SCRIPT_INJECTION_METHOD_WEB as _;
    }
}

#[doc(hidden)]
impl IntoGlib for InstallScriptInjectionMethod {
    type GlibType = ffi::OsinfoInstallScriptInjectionMethod;

    #[inline]
    fn into_glib(self) -> ffi::OsinfoInstallScriptInjectionMethod {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::OsinfoInstallScriptInjectionMethod> for InstallScriptInjectionMethod {
    #[inline]
    unsafe fn from_glib(value: ffi::OsinfoInstallScriptInjectionMethod) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for InstallScriptInjectionMethod {
                #[inline]
    #[doc(alias = "osinfo_install_script_injection_method_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::osinfo_install_script_injection_method_get_type()) }
                }
            }

impl glib::HasParamSpec for InstallScriptInjectionMethod {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder
                }
}

impl glib::value::ValueType for InstallScriptInjectionMethod {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for InstallScriptInjectionMethod {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self { unsafe {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }}
}

impl ToValue for InstallScriptInjectionMethod {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<InstallScriptInjectionMethod> for glib::Value {
    #[inline]
    fn from(v: InstallScriptInjectionMethod) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[cfg(feature = "v1_6")]
bitflags! {
    /// OSINFO_MEDIA_DETECT_REQUIRE_BOOTABLE: Requires a media to be bootable.
    /// Flags used for detecting a media.
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "OsinfoMediaDetectFlags")]
    pub struct MediaDetectFlags: u32 {
        #[doc(alias = "OSINFO_MEDIA_DETECT_REQUIRE_BOOTABLE")]
        const BOOTABLE = ffi::OSINFO_MEDIA_DETECT_REQUIRE_BOOTABLE as _;
    }
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
#[doc(hidden)]
impl IntoGlib for MediaDetectFlags {
    type GlibType = ffi::OsinfoMediaDetectFlags;

    #[inline]
    fn into_glib(self) -> ffi::OsinfoMediaDetectFlags {
        self.bits()
    }
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
#[doc(hidden)]
impl FromGlib<ffi::OsinfoMediaDetectFlags> for MediaDetectFlags {
    #[inline]
    unsafe fn from_glib(value: ffi::OsinfoMediaDetectFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
impl StaticType for MediaDetectFlags {
                #[inline]
    #[doc(alias = "osinfo_media_detect_flags_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::osinfo_media_detect_flags_get_type()) }
                }
            }

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
impl glib::HasParamSpec for MediaDetectFlags {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder
                }
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
impl glib::value::ValueType for MediaDetectFlags {
    type Type = Self;
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
unsafe impl<'a> glib::value::FromValue<'a> for MediaDetectFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self { unsafe {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }}
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
impl ToValue for MediaDetectFlags {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[cfg(feature = "v1_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
impl From<MediaDetectFlags> for glib::Value {
    #[inline]
    fn from(v: MediaDetectFlags) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

