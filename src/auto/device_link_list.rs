// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,DeviceList,Filter,List};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`DeviceLinkListExt`][trait@crate::prelude::DeviceLinkListExt], [`ListExt`][trait@crate::prelude::ListExt]
    #[doc(alias = "OsinfoDeviceLinkList")]
    pub struct DeviceLinkList(Object<ffi::OsinfoDeviceLinkList, ffi::OsinfoDeviceLinkListClass>) @extends List;

    match fn {
        type_ => || ffi::osinfo_devicelinklist_get_type(),
    }
}

impl DeviceLinkList {
        pub const NONE: Option<&'static DeviceLinkList> = None;
    

    /// Construct a new devicelink list that is initially empty.
    ///
    /// # Returns
    ///
    /// an empty devicelink list
    #[doc(alias = "osinfo_devicelinklist_new")]
    pub fn new() -> DeviceLinkList {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`DeviceLinkList`] objects.
            ///
            /// This method returns an instance of [`DeviceLinkListBuilder`](crate::builders::DeviceLinkListBuilder) which can be used to create [`DeviceLinkList`] objects.
            pub fn builder() -> DeviceLinkListBuilder {
                DeviceLinkListBuilder::new()
            }
        
}

impl Default for DeviceLinkList {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`DeviceLinkList`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeviceLinkListBuilder {
            builder: glib::object::ObjectBuilder<'static, DeviceLinkList>,
        }

        impl DeviceLinkListBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The specialization of the list. The list will be
                            /// restricted to storing [`Entity`][crate::Entity] objects of
                            /// the specified type.
                            pub fn element_type(self, element_type: glib::types::Type) -> Self {
                            Self { builder: self.builder.property("element-type", element_type), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`DeviceLinkList`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> DeviceLinkList {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@DeviceLinkList`] methods.
///
/// # Implementors
///
/// [`DeviceLinkList`][struct@crate::DeviceLinkList]
pub trait DeviceLinkListExt: IsA<DeviceLinkList> + 'static {
    /// Get all devices matching a given filter
    /// ## `filter`
    /// an optional device property filter
    ///
    /// # Returns
    ///
    /// A list of devices
    #[doc(alias = "osinfo_devicelinklist_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_devicelinklist_get_devices(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }
}

impl<O: IsA<DeviceLinkList>> DeviceLinkListExt for O {}
