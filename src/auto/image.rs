// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Entity};
#[cfg(feature = "v1_5")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
use crate::{Os,OsVariantList};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `architecture`
    ///  The target hardware architecture of this image.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `cloud-init`
    ///  Whether the image supports cloud-init customizations or not.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `format`
    ///  The image format.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `url`
    ///  The URL to this image.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`ImageExt`][trait@crate::prelude::ImageExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoImage")]
    pub struct Image(Object<ffi::OsinfoImage, ffi::OsinfoImageClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_image_get_type(),
    }
}

impl Image {
        pub const NONE: Option<&'static Image> = None;
    

    #[doc(alias = "osinfo_image_new")]
    pub fn new(id: &str, architecture: &str, format: &str) -> Image {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_image_new(id.to_glib_none().0, architecture.to_glib_none().0, format.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Image`] objects.
            ///
            /// This method returns an instance of [`ImageBuilder`](crate::builders::ImageBuilder) which can be used to create [`Image`] objects.
            pub fn builder() -> ImageBuilder {
                ImageBuilder::new()
            }
        
}

impl Default for Image {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Image`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ImageBuilder {
            builder: glib::object::ObjectBuilder<'static, Image>,
        }

        impl ImageBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The target hardware architecture of this image.
                            pub fn architecture(self, architecture: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("architecture", architecture.into()), }
                        }

                            /// Whether the image supports cloud-init customizations or not.
                            pub fn cloud_init(self, cloud_init: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("cloud-init", cloud_init.into()), }
                        }

                            /// The image format.
                            pub fn format(self, format: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("format", format.into()), }
                        }

                            /// The URL to this image.
                            pub fn url(self, url: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("url", url.into()), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Image`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Image {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Image`] methods.
///
/// # Implementors
///
/// [`Image`][struct@crate::Image]
pub trait ImageExt: IsA<Image> + 'static {
    /// Retrieves the target hardware architecture of the OS `self` provides.
    ///
    /// # Returns
    ///
    /// the hardware architecture, or NULL
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_architecture")]
    #[doc(alias = "get_architecture")]
    fn architecture(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_image_get_architecture(self.as_ref().to_glib_none().0))
        }
    }

    /// Whether `self` supports cloud init customizations
    ///
    /// # Returns
    ///
    /// [`true`] if `self` supports cloud init customizations, [`false`]
    /// otherwise.
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_cloud_init")]
    #[doc(alias = "get_cloud_init")]
    #[doc(alias = "cloud-init")]
    fn is_cloud_init(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_image_get_cloud_init(self.as_ref().to_glib_none().0))
        }
    }

    /// The format of the `self`
    ///
    /// # Returns
    ///
    /// the format, or NULL
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_format")]
    #[doc(alias = "get_format")]
    fn format(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_image_get_format(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the operating system, or NULL
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_image_get_os")]
    #[doc(alias = "get_os")]
    fn os(&self) -> Option<Os> {
        unsafe {
            from_glib_full(ffi::osinfo_image_get_os(self.as_ref().to_glib_none().0))
        }
    }

    /// Gets the varriants of the associated operating system
    ///
    /// # Returns
    ///
    /// the operating system variants, or NULL
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_image_get_os_variants")]
    #[doc(alias = "get_os_variants")]
    fn os_variants(&self) -> Option<OsVariantList> {
        unsafe {
            from_glib_full(ffi::osinfo_image_get_os_variants(self.as_ref().to_glib_none().0))
        }
    }

    /// The URL to the `self`
    ///
    /// # Returns
    ///
    /// the URL, or NULL
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_image_get_url")]
    #[doc(alias = "get_url")]
    fn url(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_image_get_url(self.as_ref().to_glib_none().0))
        }
    }

    /// Sets the [`Os`][crate::Os] associated to the [`Image`][crate::Image] instance.
    /// ## `os`
    /// an [`Os`][crate::Os] instance
    #[cfg(feature = "v1_5")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_5")))]
    #[doc(alias = "osinfo_image_set_os")]
    fn set_os(&self, os: &impl IsA<Os>) {
        unsafe {
            ffi::osinfo_image_set_os(self.as_ref().to_glib_none().0, os.as_ref().to_glib_none().0);
        }
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    fn architecture(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "architecture")
    }

    /// The target hardware architecture of this image.
    fn set_architecture(&self, architecture: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"architecture", architecture)
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    #[doc(alias = "cloud-init")]
    fn is_cloud_init(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "cloud-init")
    }

    /// Whether the image supports cloud-init customizations or not.
    #[doc(alias = "cloud-init")]
    fn set_cloud_init(&self, cloud_init: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"cloud-init", cloud_init)
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    fn format(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "format")
    }

    /// The image format.
    fn set_format(&self, format: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"format", format)
    }

    #[cfg(not(feature = "v1_3"))]
    #[cfg_attr(docsrs, doc(cfg(not(feature = "v1_3"))))]
    fn url(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "url")
    }

    /// The URL to this image.
    fn set_url(&self, url: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"url", url)
    }

    #[doc(alias = "architecture")]
    fn connect_architecture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_architecture_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::architecture".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_architecture_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "cloud-init")]
    fn connect_cloud_init_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cloud_init_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::cloud-init".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cloud_init_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "format")]
    fn connect_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_format_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::format".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_format_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "url")]
    fn connect_url_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_url_trampoline<P: IsA<Image>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoImage, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Image::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::url".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_url_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Image>> ImageExt for O {}
