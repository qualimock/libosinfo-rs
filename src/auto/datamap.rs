// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Entity};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`DatamapExt`][trait@crate::prelude::DatamapExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoDatamap")]
    pub struct Datamap(Object<ffi::OsinfoDatamap, ffi::OsinfoDatamapClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_datamap_get_type(),
    }
}

impl Datamap {
        pub const NONE: Option<&'static Datamap> = None;
    

    /// Construct a new datamapa that is initially empty.
    /// ## `id`
    /// the unique identifier
    ///
    /// # Returns
    ///
    /// an empty datamap
    #[doc(alias = "osinfo_datamap_new")]
    pub fn new(id: &str) -> Datamap {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_datamap_new(id.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Datamap`] objects.
            ///
            /// This method returns an instance of [`DatamapBuilder`](crate::builders::DatamapBuilder) which can be used to create [`Datamap`] objects.
            pub fn builder() -> DatamapBuilder {
                DatamapBuilder::new()
            }
        
}

impl Default for Datamap {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Datamap`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DatamapBuilder {
            builder: glib::object::ObjectBuilder<'static, Datamap>,
        }

        impl DatamapBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Datamap`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Datamap {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Datamap`] methods.
///
/// # Implementors
///
/// [`Datamap`][struct@crate::Datamap]
pub trait DatamapExt: IsA<Datamap> + 'static {
    /// Adds the input value and the output value associated to it to
    /// the `self`.
    /// ## `inval`
    /// the input value
    /// ## `outval`
    /// the output value
    #[doc(alias = "osinfo_datamap_insert")]
    fn insert(&self, inval: &str, outval: &str) {
        unsafe {
            ffi::osinfo_datamap_insert(self.as_ref().to_glib_none().0, inval.to_glib_none().0, outval.to_glib_none().0);
        }
    }

    /// Returns the output value with which `inval` is associated to.
    /// ## `inval`
    /// the input value
    #[doc(alias = "osinfo_datamap_lookup")]
    fn lookup(&self, inval: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_datamap_lookup(self.as_ref().to_glib_none().0, inval.to_glib_none().0))
        }
    }

    /// Returns the input value with which `outval` is associated to.
    /// ## `outval`
    /// the output value
    #[doc(alias = "osinfo_datamap_reverse_lookup")]
    fn reverse_lookup(&self, outval: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_datamap_reverse_lookup(self.as_ref().to_glib_none().0, outval.to_glib_none().0))
        }
    }
}

impl<O: IsA<Datamap>> DatamapExt for O {}
