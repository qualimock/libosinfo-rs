// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,List};
use glib::{prelude::*};
#[cfg(feature = "v1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
use glib::{translate::*};

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`ListExt`][trait@crate::prelude::ListExt]
    #[doc(alias = "OsinfoImageList")]
    pub struct ImageList(Object<ffi::OsinfoImageList, ffi::OsinfoImageListClass>) @extends List;

    match fn {
        type_ => || ffi::osinfo_imagelist_get_type(),
    }
}

impl ImageList {
        pub const NONE: Option<&'static ImageList> = None;
    

    /// Construct a new image list that is initially empty.
    ///
    /// # Returns
    ///
    /// an empty image list
    #[cfg(feature = "v1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
    #[doc(alias = "osinfo_imagelist_new")]
    pub fn new() -> ImageList {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_imagelist_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`ImageList`] objects.
            ///
            /// This method returns an instance of [`ImageListBuilder`](crate::builders::ImageListBuilder) which can be used to create [`ImageList`] objects.
            pub fn builder() -> ImageListBuilder {
                ImageListBuilder::new()
            }
        
}

#[cfg(feature = "v1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v1_3")))]
impl Default for ImageList {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`ImageList`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ImageListBuilder {
            builder: glib::object::ObjectBuilder<'static, ImageList>,
        }

        impl ImageListBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The specialization of the list. The list will be
                            /// restricted to storing [`Entity`][crate::Entity] objects of
                            /// the specified type.
                            pub fn element_type(self, element_type: glib::types::Type) -> Self {
                            Self { builder: self.builder.property("element-type", element_type), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`ImageList`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ImageList {
assert_initialized_main_thread!();
    self.builder.build() }
}
