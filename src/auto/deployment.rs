// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Device,DeviceLink,DeviceLinkList,DeviceList,Entity,Filter,Os,Platform};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `os`
    ///  The operating system to be deployed
    ///
    /// Readable | Writeable | Construct Only
    ///
    ///
    /// #### `platform`
    ///  The platform to deploy on
    ///
    /// Readable | Writeable | Construct Only
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`DeploymentExt`][trait@crate::prelude::DeploymentExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoDeployment")]
    pub struct Deployment(Object<ffi::OsinfoDeployment, ffi::OsinfoDeploymentClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_deployment_get_type(),
    }
}

impl Deployment {
        pub const NONE: Option<&'static Deployment> = None;
    

    /// Create a new deployment entity
    /// ## `id`
    /// the unique identifier
    /// ## `os`
    /// the operating system to deploy
    /// ## `platform`
    /// the platform to deploy on
    ///
    /// # Returns
    ///
    /// A deployment entity
    #[doc(alias = "osinfo_deployment_new")]
    pub fn new(id: &str, os: &impl IsA<Os>, platform: &impl IsA<Platform>) -> Deployment {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::osinfo_deployment_new(id.to_glib_none().0, os.as_ref().to_glib_none().0, platform.as_ref().to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Deployment`] objects.
            ///
            /// This method returns an instance of [`DeploymentBuilder`](crate::builders::DeploymentBuilder) which can be used to create [`Deployment`] objects.
            pub fn builder() -> DeploymentBuilder {
                DeploymentBuilder::new()
            }
        
}

impl Default for Deployment {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Deployment`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DeploymentBuilder {
            builder: glib::object::ObjectBuilder<'static, Deployment>,
        }

        impl DeploymentBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The operating system to be deployed
                            pub fn os(self, os: &impl IsA<Os>) -> Self {
                            Self { builder: self.builder.property("os", os.clone().upcast()), }
                        }

                            /// The platform to deploy on
                            pub fn platform(self, platform: &impl IsA<Platform>) -> Self {
                            Self { builder: self.builder.property("platform", platform.clone().upcast()), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Deployment`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Deployment {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Deployment`] methods.
///
/// # Implementors
///
/// [`Deployment`][struct@crate::Deployment]
pub trait DeploymentExt: IsA<Deployment> + 'static {
    /// Associate a device with a deployment. The returned [`DeviceLink`][crate::DeviceLink]
    /// can be used to record extra metadata against the link
    /// ## `dev`
    /// the device to associate
    ///
    /// # Returns
    ///
    /// the device association
    #[doc(alias = "osinfo_deployment_add_device")]
    fn add_device(&self, dev: &impl IsA<Device>) -> Option<DeviceLink> {
        unsafe {
            from_glib_none(ffi::osinfo_deployment_add_device(self.as_ref().to_glib_none().0, dev.as_ref().to_glib_none().0))
        }
    }

    /// Retrieve all the associated devices matching the filter.
    /// The filter matches against the link, not the device.
    /// ## `filter`
    /// an optional filter
    ///
    /// # Returns
    ///
    /// a list of [`Device`][crate::Device] entities
    #[doc(alias = "osinfo_deployment_get_device_links")]
    #[doc(alias = "get_device_links")]
    fn device_links(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceLinkList> {
        unsafe {
            from_glib_full(ffi::osinfo_deployment_get_device_links(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Retrieve all the associated devices matching the filter.
    /// The filter matches against the device, not the link.
    /// ## `filter`
    /// an optional filter
    ///
    /// # Returns
    ///
    /// a list of [`Device`][crate::Device] entities
    #[doc(alias = "osinfo_deployment_get_devices")]
    #[doc(alias = "get_devices")]
    fn devices(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceList> {
        unsafe {
            from_glib_full(ffi::osinfo_deployment_get_devices(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Get the operating system for the deployment
    ///
    /// # Returns
    ///
    /// an OS, or NULL
    #[doc(alias = "osinfo_deployment_get_os")]
    #[doc(alias = "get_os")]
    fn os(&self) -> Option<Os> {
        unsafe {
            from_glib_none(ffi::osinfo_deployment_get_os(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the platform for the deployment
    ///
    /// # Returns
    ///
    /// a platform, or NULL
    #[doc(alias = "osinfo_deployment_get_platform")]
    #[doc(alias = "get_platform")]
    fn platform(&self) -> Option<Platform> {
        unsafe {
            from_glib_none(ffi::osinfo_deployment_get_platform(self.as_ref().to_glib_none().0))
        }
    }

    /// Get the preferred device matching a given filter
    /// ## `filter`
    /// a device metadata filter
    ///
    /// # Returns
    ///
    /// a device, or NULL
    #[doc(alias = "osinfo_deployment_get_preferred_device")]
    #[doc(alias = "get_preferred_device")]
    fn preferred_device(&self, filter: Option<&impl IsA<Filter>>) -> Option<Device> {
        unsafe {
            from_glib_none(ffi::osinfo_deployment_get_preferred_device(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    /// Get the preferred device link matching a given filter and platform.
    /// The filter matches against attributes on the link, not the device.
    /// ## `filter`
    /// a device metadata filter
    ///
    /// # Returns
    ///
    /// a device, or NULL
    #[doc(alias = "osinfo_deployment_get_preferred_device_link")]
    #[doc(alias = "get_preferred_device_link")]
    fn preferred_device_link(&self, filter: Option<&impl IsA<Filter>>) -> Option<DeviceLink> {
        unsafe {
            from_glib_none(ffi::osinfo_deployment_get_preferred_device_link(self.as_ref().to_glib_none().0, filter.map(|p| p.as_ref()).to_glib_none().0))
        }
    }
}

impl<O: IsA<Deployment>> DeploymentExt for O {}
