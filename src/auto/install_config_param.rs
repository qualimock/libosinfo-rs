// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Datamap,Entity,InstallConfigParamPolicy};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `name`
    ///  The name of the configuration parameter.
    ///
    /// Readable | Writeable | Construct Only
    ///
    ///
    /// #### `policy`
    ///  The policy of the configuration parameter.
    ///
    /// Readable
    ///
    ///
    /// #### `value-map`
    ///  The mapping between generic values and OS-specific values for this
    /// configuration parameter
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`InstallConfigParamExt`][trait@crate::prelude::InstallConfigParamExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoInstallConfigParam")]
    pub struct InstallConfigParam(Object<ffi::OsinfoInstallConfigParam, ffi::OsinfoInstallConfigParamClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_install_config_param_get_type(),
    }
}

impl InstallConfigParam {
        pub const NONE: Option<&'static InstallConfigParam> = None;
    

    /// Construct a new configuration parameter for an [`InstallScript`][crate::InstallScript].
    /// ## `name`
    /// the configuration parameter name
    ///
    /// # Returns
    ///
    /// the new configuration parameter
    #[doc(alias = "osinfo_install_config_param_new")]
    pub fn new(name: &str) -> InstallConfigParam {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_install_config_param_new(name.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`InstallConfigParam`] objects.
            ///
            /// This method returns an instance of [`InstallConfigParamBuilder`](crate::builders::InstallConfigParamBuilder) which can be used to create [`InstallConfigParam`] objects.
            pub fn builder() -> InstallConfigParamBuilder {
                InstallConfigParamBuilder::new()
            }
        
}

impl Default for InstallConfigParam {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`InstallConfigParam`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct InstallConfigParamBuilder {
            builder: glib::object::ObjectBuilder<'static, InstallConfigParam>,
        }

        impl InstallConfigParamBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The name of the configuration parameter.
                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            /// The mapping between generic values and OS-specific values for this
                            /// configuration parameter
                            pub fn value_map(self, value_map: &impl IsA<Datamap>) -> Self {
                            Self { builder: self.builder.property("value-map", value_map.clone().upcast()), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`InstallConfigParam`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> InstallConfigParam {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@InstallConfigParam`] methods.
///
/// # Implementors
///
/// [`InstallConfigParam`][struct@crate::InstallConfigParam]
pub trait InstallConfigParamExt: IsA<InstallConfigParam> + 'static {
    ///
    /// # Returns
    ///
    /// the name of the configuration parameter
    #[doc(alias = "osinfo_install_config_param_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_param_get_name(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the policy of the configuration parameter
    #[doc(alias = "osinfo_install_config_param_get_policy")]
    #[doc(alias = "get_policy")]
    fn policy(&self) -> InstallConfigParamPolicy {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_get_policy(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// The data map used to transform values set for this
    ///  parameter to OS-specific values, or NULL.
    #[doc(alias = "osinfo_install_config_param_get_value_map")]
    #[doc(alias = "get_value_map")]
    #[doc(alias = "value-map")]
    fn value_map(&self) -> Option<Datamap> {
        unsafe {
            from_glib_none(ffi::osinfo_install_config_param_get_value_map(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// TRUE if the config_param is optional. FALSE otherwise.
    #[doc(alias = "osinfo_install_config_param_is_optional")]
    fn is_optional(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_is_optional(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// TRUE if the config_param is required. FALSE otherwise.
    #[doc(alias = "osinfo_install_config_param_is_required")]
    fn is_required(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_install_config_param_is_required(self.as_ref().to_glib_none().0))
        }
    }

    /// After a call to [`set_value_map()`][Self::set_value_map()], `datamap` will
    /// be used to transform values set for this parameter to OS-specific
    /// values. A NULL `datamap` will disable transformations.
    /// ## `datamap`
    /// a [`Datamap`][crate::Datamap] to transform values this parameter is set to,
    /// or NULL to disable transformations for this parameter
    #[doc(alias = "osinfo_install_config_param_set_value_map")]
    #[doc(alias = "value-map")]
    fn set_value_map(&self, datamap: &impl IsA<Datamap>) {
        unsafe {
            ffi::osinfo_install_config_param_set_value_map(self.as_ref().to_glib_none().0, datamap.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "policy")]
    fn connect_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_policy_trampoline<P: IsA<InstallConfigParam>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallConfigParam, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallConfigParam::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::policy".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_policy_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "value-map")]
    fn connect_value_map_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_map_trampoline<P: IsA<InstallConfigParam>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoInstallConfigParam, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(InstallConfigParam::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::value-map".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_value_map_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<InstallConfigParam>> InstallConfigParamExt for O {}
