// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Entity};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `alpha`
    ///  Whether alpha channel is supported in the avatar.
    ///
    /// Readable
    ///
    ///
    /// #### `height`
    ///  The required height (in pixels) of the avatar.
    ///
    /// Readable
    ///
    ///
    /// #### `mime-types`
    ///  The allowed mime-types for the avatar.
    ///
    /// Readable
    ///
    ///
    /// #### `width`
    ///  The required width (in pixels) of the avatar.
    ///
    /// Readable
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`AvatarFormatExt`][trait@crate::prelude::AvatarFormatExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoAvatarFormat")]
    pub struct AvatarFormat(Object<ffi::OsinfoAvatarFormat, ffi::OsinfoAvatarFormatClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_avatar_format_get_type(),
    }
}

impl AvatarFormat {
        pub const NONE: Option<&'static AvatarFormat> = None;
    

    /// Construct a new user avatar file for an [`InstallScript`][crate::InstallScript].
    ///
    /// # Returns
    ///
    /// the necessary information to create an avatar for
    ///  an user
    #[doc(alias = "osinfo_avatar_format_new")]
    pub fn new() -> AvatarFormat {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_avatar_format_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`AvatarFormat`] objects.
            ///
            /// This method returns an instance of [`AvatarFormatBuilder`](crate::builders::AvatarFormatBuilder) which can be used to create [`AvatarFormat`] objects.
            pub fn builder() -> AvatarFormatBuilder {
                AvatarFormatBuilder::new()
            }
        
}

impl Default for AvatarFormat {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`AvatarFormat`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct AvatarFormatBuilder {
            builder: glib::object::ObjectBuilder<'static, AvatarFormat>,
        }

        impl AvatarFormatBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`AvatarFormat`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> AvatarFormat {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@AvatarFormat`] methods.
///
/// # Implementors
///
/// [`AvatarFormat`][struct@crate::AvatarFormat]
pub trait AvatarFormatExt: IsA<AvatarFormat> + 'static {
    ///
    /// # Returns
    ///
    /// Whether alpha channel is supported in the avatar.
    #[doc(alias = "osinfo_avatar_format_get_alpha")]
    #[doc(alias = "get_alpha")]
    #[doc(alias = "alpha")]
    fn is_alpha(&self) -> bool {
        unsafe {
            from_glib(ffi::osinfo_avatar_format_get_alpha(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the required height (in pixels) of the avatar, or -1.
    #[doc(alias = "osinfo_avatar_format_get_height")]
    #[doc(alias = "get_height")]
    fn height(&self) -> i32 {
        unsafe {
            ffi::osinfo_avatar_format_get_height(self.as_ref().to_glib_none().0)
        }
    }

    ///
    /// # Returns
    ///
    /// the required mime-types of the avatar.
    #[doc(alias = "osinfo_avatar_format_get_mime_types")]
    #[doc(alias = "get_mime_types")]
    #[doc(alias = "mime-types")]
    fn mime_types(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::osinfo_avatar_format_get_mime_types(self.as_ref().to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the required width (in pixels) of the avatar, or -1.
    #[doc(alias = "osinfo_avatar_format_get_width")]
    #[doc(alias = "get_width")]
    fn width(&self) -> i32 {
        unsafe {
            ffi::osinfo_avatar_format_get_width(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "alpha")]
    fn connect_alpha_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_alpha_trampoline<P: IsA<AvatarFormat>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(AvatarFormat::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::alpha".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_alpha_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "height")]
    fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_trampoline<P: IsA<AvatarFormat>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(AvatarFormat::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::height".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "mime-types")]
    fn connect_mime_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mime_types_trampoline<P: IsA<AvatarFormat>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(AvatarFormat::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::mime-types".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_mime_types_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "width")]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<P: IsA<AvatarFormat>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoAvatarFormat, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(AvatarFormat::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::width".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<AvatarFormat>> AvatarFormatExt for O {}
