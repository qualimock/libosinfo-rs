// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../girs
// DO NOT EDIT

use crate::{ffi,Entity};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `architecture`
    ///  The target hardware architecture to which these resources applies.
    ///
    /// Readable | Writeable | Construct Only
    ///
    ///
    /// #### `cpu`
    ///  The CPU frequency in hertz (Hz).
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `n-cpus`
    ///  The number of CPUs.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `ram`
    ///  The amount of Random Access Memory (RAM) in bytes.
    ///
    /// Readable | Writeable
    ///
    ///
    /// #### `storage`
    ///  The amount of storage space in bytes.
    ///
    /// Readable | Writeable
    /// <details><summary><h4>Entity</h4></summary>
    ///
    ///
    /// #### `id`
    ///  The unique identifier for the entity The format of identifiers
    /// is undefined, but the recommended practice is to use a URI.
    /// This parameter must be set at time of construction as no
    /// default value is provided.
    ///
    /// Readable | Writeable | Construct
    /// </details>
    ///
    /// # Implements
    ///
    /// [`ResourcesExt`][trait@crate::prelude::ResourcesExt], [`EntityExt`][trait@crate::prelude::EntityExt]
    #[doc(alias = "OsinfoResources")]
    pub struct Resources(Object<ffi::OsinfoResources, ffi::OsinfoResourcesClass>) @extends Entity;

    match fn {
        type_ => || ffi::osinfo_resources_get_type(),
    }
}

impl Resources {
        pub const NONE: Option<&'static Resources> = None;
    

    #[doc(alias = "osinfo_resources_new")]
    pub fn new(id: &str, architecture: &str) -> Resources {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::osinfo_resources_new(id.to_glib_none().0, architecture.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Resources`] objects.
            ///
            /// This method returns an instance of [`ResourcesBuilder`](crate::builders::ResourcesBuilder) which can be used to create [`Resources`] objects.
            pub fn builder() -> ResourcesBuilder {
                ResourcesBuilder::new()
            }
        
}

impl Default for Resources {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Resources`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ResourcesBuilder {
            builder: glib::object::ObjectBuilder<'static, Resources>,
        }

        impl ResourcesBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            /// The target hardware architecture to which these resources applies.
                            pub fn architecture(self, architecture: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("architecture", architecture.into()), }
                        }

                            /// The CPU frequency in hertz (Hz).
                            pub fn cpu(self, cpu: i64) -> Self {
                            Self { builder: self.builder.property("cpu", cpu), }
                        }

                            /// The number of CPUs.
                            pub fn n_cpus(self, n_cpus: i32) -> Self {
                            Self { builder: self.builder.property("n-cpus", n_cpus), }
                        }

                            /// The amount of Random Access Memory (RAM) in bytes.
                            pub fn ram(self, ram: i64) -> Self {
                            Self { builder: self.builder.property("ram", ram), }
                        }

                            /// The amount of storage space in bytes.
                            pub fn storage(self, storage: i64) -> Self {
                            Self { builder: self.builder.property("storage", storage), }
                        }

                            /// The unique identifier for the entity The format of identifiers
                            /// is undefined, but the recommended practice is to use a URI.
                            /// This parameter must be set at time of construction as no
                            /// default value is provided.
                            pub fn id(self, id: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("id", id.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Resources`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Resources {
assert_initialized_main_thread!();
    self.builder.build() }
}

/// Trait containing all [`struct@Resources`] methods.
///
/// # Implementors
///
/// [`Resources`][struct@crate::Resources]
pub trait ResourcesExt: IsA<Resources> + 'static {
    /// Retrieves the target hardware architecture to which `self` applies. Some
    /// operating systems specify the same requirements and recommendations for all
    /// architectures. In such cases, the string returned by this call will be
    /// `OSINFO_ARCHITECTURE_ALL`.
    ///
    /// # Returns
    ///
    /// the hardware architecture.
    #[doc(alias = "osinfo_resources_get_architecture")]
    #[doc(alias = "get_architecture")]
    fn architecture(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::osinfo_resources_get_architecture(self.as_ref().to_glib_none().0))
        }
    }

    /// Retrieves the CPU frequency in hertz (Hz). Divide the value by `OSINFO_MEGAHERTZ` if
    /// you need this value in megahertz (MHz).
    ///
    /// # Returns
    ///
    /// the CPU frequency, or -1.
    #[doc(alias = "osinfo_resources_get_cpu")]
    #[doc(alias = "get_cpu")]
    fn cpu(&self) -> i64 {
        unsafe {
            ffi::osinfo_resources_get_cpu(self.as_ref().to_glib_none().0)
        }
    }

    /// Retrieves the number of CPUs.
    ///
    /// # Returns
    ///
    /// the number of CPUs, or -1.
    #[doc(alias = "osinfo_resources_get_n_cpus")]
    #[doc(alias = "get_n_cpus")]
    #[doc(alias = "n-cpus")]
    fn n_cpus(&self) -> i32 {
        unsafe {
            ffi::osinfo_resources_get_n_cpus(self.as_ref().to_glib_none().0)
        }
    }

    /// Retrieves the amount of Random Access Memory (RAM) in bytes. Divide the value
    /// by `OSINFO_MEBIBYTES` if you need this value in mebibytes.
    ///
    /// # Returns
    ///
    /// the amount of RAM, or -1.
    #[doc(alias = "osinfo_resources_get_ram")]
    #[doc(alias = "get_ram")]
    fn ram(&self) -> i64 {
        unsafe {
            ffi::osinfo_resources_get_ram(self.as_ref().to_glib_none().0)
        }
    }

    /// Retrieves the amount of storage space in bytes. Divide the value by
    /// `OSINFO_GIBIBYTES` if you need this value in gibibytes.
    ///
    /// # Returns
    ///
    /// the amount of storage, or -1.
    #[doc(alias = "osinfo_resources_get_storage")]
    #[doc(alias = "get_storage")]
    fn storage(&self) -> i64 {
        unsafe {
            ffi::osinfo_resources_get_storage(self.as_ref().to_glib_none().0)
        }
    }

    /// Sets the CPU frequency.
    /// ## `cpu`
    /// the CPU frequency in hertz (Hz)
    #[doc(alias = "osinfo_resources_set_cpu")]
    #[doc(alias = "cpu")]
    fn set_cpu(&self, cpu: i64) {
        unsafe {
            ffi::osinfo_resources_set_cpu(self.as_ref().to_glib_none().0, cpu);
        }
    }

    /// Sets the number of CPUs.
    /// ## `n_cpus`
    /// the number of CPUs
    #[doc(alias = "osinfo_resources_set_n_cpus")]
    #[doc(alias = "n-cpus")]
    fn set_n_cpus(&self, n_cpus: i32) {
        unsafe {
            ffi::osinfo_resources_set_n_cpus(self.as_ref().to_glib_none().0, n_cpus);
        }
    }

    /// Sets the amount of RAM in bytes.
    /// ## `ram`
    /// the amount of ram in bytes
    #[doc(alias = "osinfo_resources_set_ram")]
    #[doc(alias = "ram")]
    fn set_ram(&self, ram: i64) {
        unsafe {
            ffi::osinfo_resources_set_ram(self.as_ref().to_glib_none().0, ram);
        }
    }

    /// Sets the amount of storage space.
    /// ## `storage`
    /// the amount of storage in bytes
    #[doc(alias = "osinfo_resources_set_storage")]
    #[doc(alias = "storage")]
    fn set_storage(&self, storage: i64) {
        unsafe {
            ffi::osinfo_resources_set_storage(self.as_ref().to_glib_none().0, storage);
        }
    }

    #[doc(alias = "cpu")]
    fn connect_cpu_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cpu_trampoline<P: IsA<Resources>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoResources, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Resources::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::cpu".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cpu_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "n-cpus")]
    fn connect_n_cpus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_n_cpus_trampoline<P: IsA<Resources>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoResources, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Resources::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::n-cpus".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_n_cpus_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "ram")]
    fn connect_ram_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ram_trampoline<P: IsA<Resources>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoResources, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Resources::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::ram".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_ram_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "storage")]
    fn connect_storage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_storage_trampoline<P: IsA<Resources>, F: Fn(&P) + 'static>(this: *mut ffi::OsinfoResources, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) { unsafe {
            let f: &F = &*(f as *const F);
            f(Resources::from_glib_borrow(this).unsafe_cast_ref())
        }}
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::storage".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_storage_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Resources>> ResourcesExt for O {}
